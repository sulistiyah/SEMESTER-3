Basis Data - Database
----------------------
   Teori --> target matkul : mhs dapat merancang sebuah basis data
   Praktek --> target :
               mengolah data dalam database
               (rancangan sudah ada --> pengolahan data -->info)

contoh kasus :
membuat sistem untuk mengelola data jual beli sebuah toko
   objek yang anda amati dalam proses jual beli
       barang ---> kodebarang, namabarang, jenis, ukuran, stok
                      (ini data)
       pegawai
       pelanggan
       penjualan


data ??
    --> kumpulan fakta dari sebuah objek

   data --> proses --> informasi

database --> tempat penyimpan data (bukan fisik)
            - kumpulan file2 (tabel2)

DBMS = Database management system
     --> software / aplikasi
   contoh : mysql

bahasa : SQL (Strucured Query Language) --> PL/SQL
-------------------------------------------------------
Struktur dasar bahasa SQL :
  1. DDL = Data Definition Language
     --> SQL yang digunakan utk pendefinisian struktur dalam database
   
      struktur dalam database :??
            database, tabel, kolom, user, procedure, function,
            view, trigger, cursor,....

      contoh :
           CREATE, ALTER, DROP
           SHOW, USE, DESC
       
  2. DML = Data Manipulation Language
      --> SQL yang digunakan untuk melakukan perubahan data dalam database
          contoh :
              INSERT, UPDATE, DELETE, SELECT


  3. DCL = Data Control Language
      --> SQL yang digunakan untuk pengendalian akses database
         contoh :
            GRANT : pemberian hak akses
            REVOKE : pencabutan hak akses
================================================================
Basis data
     kumpulan file/tabel

  database ---> tabel
  tabel 
        kumpulan baris dan kolom
  
   tabel / skema relasi
   database / workspace
==============================================================
Langkah masuk MySQL
--------------------
   - aktifkan terlebih dahulu module mysql yang ada pda panel XAMPP
         dengan cara klik tombol start
   - utk bekerja dalam mysql pastikan posisi command sesuai dengan posisi instalasi mysql
       C:\xampp\mysql\bin

CARA 1 :
   - buka command prompt
   - ganti posisi command prompt 
       awal : C:\Users\Lenovo>
      target :   C:\xampp\mysql\bin

   - ganti directory bertahap, perintah CD atau CHDIR
    C:\Users\Lenovo>cd..

C:\Users>cd..

C:\>cd xampp

C:\xampp>cd mysql

C:\xampp\mysql>cd bin

C:\xampp\mysql\bin>

     -untuk masuk kedalam mysql, perintah dasar
     
          mysql -u namauser -p password -h alamathost

        user tertinggi (super administrator) : root
          password : tidak ada
          alamat host : localhost

CARA 2 :
     - buka command prompt
   - ganti posisi command prompt 
       awal : C:\Users\Lenovo>
      target :   C:\xampp\mysql\bin

   - ganti directory bertahap, perintah CD atau CHDIR secara langsung
  
       C:\Users\Lenovo>cd C:\xampp\mysql\bin

CARA 3 :
  langsung klik button shell pada panel XAMPP
---------------------------------------------------------
DATA DEFINITION LANGUAGE
-------------------------
1. Melihat database yang sudah ada
       SHOW databases;

2. Masuk kedalam sebuah database
       USE namadatabase;

    contoh :
        masuk kedalam database mysql 
                 USE mysql;

3. Melihat tabel yang ada dalam sebuah database
        SHOW tables;

4. Melihat struktur sebuah tabel 
        DESC namatabel;

   contoh : melihat struktur tabel user pada database mysql
        DESC user;
   
      desc time_zone;

5. Melihat isi tabel keseluruhan 
        SELECT * FROM namatabel;

    * --> semua /all

    Kalau data dalam tabel ada, maka akan tampil berupa tabel
    Kalau data tidak ada
          response : empty set

6. Menampilkan hanya beberapa field/kolom dari sebuah tabel
        SELECT namafield1, namafield2
        FROM namatabel;

    Contoh : 
       select host,user, password from user;


Tampilkan kolom  host, user,  Password , select_priv, Insert_priv d tabel user

 7. Membuat database

       CREATE database namadatabase;
   
    catatan :
       - pastikan namadatabase belum ada sebelumnya
       - penamaan struktur mengikuti aturan penamaan variabel
   
    contoh :
       buat database db_latihan1
          CREATE database db_latihan1;

8. menghapus database
    --> ingat dihapus bukan database bawaan 

       DROP DATABASE namadatabase;
  
   contoh :
     Hapus database db_latihan1
          DROP database db_latihan1;


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


DDL --> Data Definition Language

1. Membuat database baru
2. Membuat tabel baru
3. Merubah struktur tabel (ALTER TABLE)
4. Merubah nama tabel dan menghapus tabel
5. Menghapus database

Primary Key
-----------
--> Mengidentifikasi setiap baris didalam sebuah tabel. Kolom/field yang dijadikan sbg PK harus unik.

Contoh : Tabel Mahasiswa
no_bp
nama
alamat
tgl_lahir

6. Membuat primary key pada sebuah tabel
----------------------------------------

Pada tabel barang :
kdbrg --> kodebarang
nmbrg --> namabarang
satuan

a. Mendefinisikan PK diawal saat pembuatan tabel.

Struktur1 :

CREATE TABLE namatabel
(
   namafield1 tipedata(constraint),
   namafield2 tipedata(constraint),
   ................
   primary key(namafield1)
);

Struktur2 :

CREATE TABLE namatabel
(
   namafield1 tipedata(constraint) primary key,
   namafield2 tipedata(constraint),
   ................
);

Contoh :

Buatlah tabel tbrg pada database dbpenjualan dengan field :

kdbrg --> varchar(5) primary key
nmbrg --> varchar(25)
satuan --> varchar(15)

cara 1:
CREATE TABLE tbrg
(
   kdbrg varchar(5),
   nmbrg varchar(25),
   satuan varchar(15),
   primary key(kdbrg)
);

cara 2:
CREATE TABLE tbrg2
(
   kdbrg varchar(5) primary key,
   nmbrg varchar(25),
   satuan varchar(15)
);

PK --> NO (NOT NULL)
Selain PK --> YES (NULL)

NULL != NOL (0)

b. Melakukan perubahan pada tabel yang sudah ada
(ALTER TABLE)

Contoh :
Buatlah sebuah tabel baru dengan nama tpelanggan, dengan field:

kdlgn --> varchar(5)
nmlgn --> varchar(25)
almlgn --> varchar(50)
kota --> varchar(25)
kdpos --> varchar(5)
notelp --> varchar(12)

Struktur :

ALTER TABLE namatabel
ADD primary key(namafield);

ALTER TABLE tpelanggan
ADD primary key(kdlgn);

DESC tpelanggan;

c. Mengubah sebuah field menjadi NOT NULL (harus diisi)

Contoh : ubahlah field nmlgn menjadi NOT NULL

ALTER TABLE tpelanggan
CHANGE nmlgn nmlgn varchar(25) NOT NULL;

d. Menghilangkan primary key dari sebuah tabel

Struktur :

ALTER TABLE namatabel
DROP primary key;

Contoh :
Hilangkan PK dari tabel tpelanggan

ALTER TABLE tpelanggan
DROP primary key;

DESC tpelanggan;

Membuat tabel dengan PK lebih dari satu (composite PK)

CREATE TABLE tbrg
(
   kdbrg varchar(5),
   nmbrg varchar(25),
   satuan varchar(15),
   primary key(kdbrg, nmbrg)
);

DML --> Data Manipulation Language
==================================
--> Bahasa SQL yang digunakan untuk melakukan memanipulasi data.
Contoh : INSERT, UPDATE, DELETE, SELECT

1. Perintah untuk menampilkan semua nilai/record dalam sebuah tabel

SELECT * FROM namatabel;

2. INSERT
--> Perintah yang digunakan untuk menginputkan nilai dalam sebuah tabel

a. Mengisi seluruh field/kolom dalam sebuah tabel

Struktur:

INSERT INTO namatabel
VALUES (nilai1, nilai2, .....);

Catatan :
- Pastikan banyaknya nilai yang diinputkan sesuai dengan banyaknya kolom didalam tabel.
- Untuk kolom dengan tipe primary key, pastikan nilainya adalah unik (belum pernah diinputkan).
- Nilai dengan tipe karakter(char, varchar) ditulis dengan tanda petik. Contoh : 'Meri'
- Nilai dengan tipe numerik(int, bigint) tidak perlu ditulis dengan tanda petik. Contoh : 1250
- Nilai dengan tipe NULL (boleh kosong), dituliskan dengan NULL tanpa tanda petik.

Contoh1 :
Inputkan data barang dengan kode B001 dan nama barang adalah Laptop Acer, satuan Unit.

INSERT INTO tbrg
VALUES('B001','Laptop Acer','Unit');

SELECT * FROM tbrg;

Contoh2 :
Inputkan data barang dengan kode B001 nama barang adalah Mouse Logitech dan satuan adalah Pieces.

Duplicate entry --> karena kode barangnya sama.

Contoh3 :
Inputkan data barang dengan kode B002. nama barang adalah Monitor LG, tidak ada nilai satuan

INSERT INTO tbrg
VALUES ('B002','Monitor LG',NULL);

NULL --> tidak dalam tanda petik
jika ditulis 'NULL' --> bernilai tulisan NULL

b. Mengisi beberapa baris sekaligus

INSERT INTO namatabel VALUES
(nilai1, nilai2, .....),
(nilai1, nilai2, .....),
.....;

Contoh :
Isikan data sbb:
Kode barang B003, nama barang Flashdisk HP, satuan buah
Kode barang B004, nama barang keyboard LG, satuan pieces
Kode barang B005, nama barang Mouse ECO, satuan box

c. Mengisikan data ke beberapa kolom/field

INSERT INTO namatabel(namafield1, namafield2)
VALUES (nilaifield1, nilaifield2),
       (nilaifield1, nilaifield2),
       ...............;

Yang diisikan hanya 2 kolom saja dan pastikan nilai PK ada, kecuali jika PK diseting auto increment.

Contoh1 :
Isikan hanya kode dan nama barang saja untuk barang dengan kode B007 dan nama barang adalah Headshet JBL.
Kode B008 nama barang adalah CMOS Battery.

INSERT INTO tbrg(kdbrg, nmbrg)
VALUES
      ('B007','Headshet JBL'),
      ('B008','CMOS Battery');

Contoh2 :
Isikan kdlgn, nama pelanggan dan kota saja, dengan data sbb :
kdlgn P001, nama Raisa, Kota Jakarta
kdlgn P002, nama Rossa, kota tidak ada isinya.

d. INSERT... SET
--> bentuk lain dari insert. Disini nilai untuk setiap kolom diisikan satu persatu.

INSERT INTO namatabel
SET namafield1 = nilai1,
    namafield2 = nilai2,
    ......;

Contoh :
Isikan kode barang B010, nama barang adalah speaker Logitech dan satuan adalah unit.

INSERT INTO tbrg
SET kdbrg = 'B010',
    nmbrg = 'Speaker Logitech',
    satuan = 'Unit';

Membuat tabel yang mengandung nilai auto increment dan nilai default
auto increment --> melakukan penambahan data secara otomatis. Contoh jika kdbrg diseting auto increment, maka akan menjad 1, 2, 3, ....
default --> membuat data memiliki nilai default.
Contoh misalnya tanggal diseting date default 20210922
Artinya : ketika tanggal ini tidak isi, maka secara otomatis sistem akan mengisikan data 20210922

Buatlah sebuah tabel tkaryawan dengan komposisi :
kode int auto_increment primary key
nama_kary varchar(30) not null
kota varchar(30) default 'Padang'
tanggal date default 20210922

e. Mengisi tabel dengan tipe data auto increment

Contoh1 :
Masukkan data ke tabel tkaryawan dengan data sbb;
kode null
nama Budi
kota Bukittinggi
tanggal 1 September 2021

INSERT INTO tkaryawan
VALUES(NULL,'Budi','Bukittinggi','2021-09-01');

Contoh2 :
kode tidak diisi
nama susi
kota bandung
tanggal 2 September 2021

INSERT INTO tkaryawan (nama_kary, kota, tanggal)
VALUES('Susi','Bandung','2021-09-02');

f. Mengisi data dengan nilai default

Contoh :
Masukkan data berikut
kode NULL
nama Joko
field yang lain adalah nilai default

INSERT INTO tkaryawan
VALUES(NULL, 'Joko', default, default);



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



SQL --> Structure Query Language
1. DDL --> Data Definition Language
   Bahasa untuk mendefinisikan struktur dalam    database. Yang berhubungan dgn database,    table, user, procedure, dll

2. DML --> Data Manipulation Language
   Bahasa yang digunakan untuk memanipulasi       data. Insert, Update, Delete, Select.

3. DCL --> Data Control Language
   User/privilege

Database dbjual :
1. Tabel tbrg
2. Tabel tpelanggan
3. Tabel ttrans

2 buah tabel dari database dbjual
1. tabel tbrg  --> halaman 105
2. tabel tpelanggan --> halaman 122

- Isi tabel tbrg dengan data yang ada pada halaman 116
  - Isi tabel tpelanggan dengan data yang ada pada halaman 123

DML
---
A. INSERT
=========
1. INSERT INTO namatabel VALUES
    
   INSERT INTO tbrg VALUES
   ('.....','.....','.....'),
   ('.....','.....','.....'),
   ...... ;

2. INSERT ... SET

B. UPDATE
=========
--> mengubah nilai data pada sebuah tabel

Struktur :

UPDATE namatabel
SET namafield = nilaibaru
[WHERE kondisi];

Contoh :
Ubahlah nilai satuan menjadi unit.

UPDATE tbrg
SET satuan = 'Unit';

Ubahlah nilai satuan menjadi unit dengan kode barang B001.
Tabel ?? --> tbrg
Update ?? --> satuan = unit
field ?? --> kdbrg = B001

Kondisi
-------
--> pernyataan logis (benar atau salah)

UPDATE namatabel
SET namafield = nilaibaru
[WHERE kondisi];

Operator dalam kondisi :
- Operator relasi : <, <=, >, >=, <>/!=

COntoh :
1. Jadikan satuan menjadi unit untuk barang dengan kode B005.

UPDATE tbrg
SET satuan = 'Unit'
WHERE kdbrg = 'B005';

2. Ubah nama barang disket menjadi flashdisk sandisk 

UPDATE tbrg
SET nmbrg = 'Flashdisk Sandisk'
WHERE nmbrg = 'Disket';

3. Untuk satuan selain Unit, ubahlah menjadi Box

UPDATE tbrg
SET satuan = 'Box'
WHERE satuan <> 'Unit';

atau :

UPDATE tbrg
SET satuan = 'Box'
WHERE satuan != 'Unit'

atau :

UPDATE tbrg
SET satuan = 'Box'
WHERE NOT(satuan = 'Unit');

- Operator Logika : 
AND 
OR
NOT

Contoh : 
1. Ubahlah satuan pada tabel barang menjadi Pieces
Untuk barang dengan kode B001 atau B002.

UPDATE tbrg
SET satuan = 'Pieces'
WHERE kdbrg = 'B001' OR kdbrg = 'B002';

C. DELETE
=========
--> Perintah untuk menghapus nilai yang ada pada sebuah tabel.

Struktur :

DELETE FROM namatabel
[WHERE kondisi];

Contoh :
Hapuslah data barang dengan kode B005

DELETE FROM tbrg
WHERE kdbrg = 'B005';

D. TRUNCATE
--> perintah untuk mengosongkan tabel

Struktur :
TRUNCATE TABLE namatabel;

DELETE FROM namatabel;

DML --> Data Manipulation Language

SELECTION 
--> Menampilkan semua data/beberapa field dari satu atau lebih tabel dengan kondisi tertentu.

1. Select dengan ekspresi
--> select ini tidak menggunakan tabel tetapi menggunakan ekspresi sederhana.

Struktur :
SELECT .... select ekspression;

Contoh :

SELECT 2;
SELECT 10 + 5;
SELECT 'Teknologi Informasi';
SELECT 2*3, 2+3;

2. Select (query) yang berasal dari 1 tabel
-------------------------------------------
1. Menampilkan isi seluruh tabel
   SELECT * FROM namatabel;
   contoh : SELECT * FROM tpelanggan;

2. Menampilkan hanya beberapa kolom/field yang dibutuhkan

struktur :

SELECT namafield1, namafield2, ....
FROM namatabel;

Contoh : 

- Tampilkan nama dan alamat pelanggan.

Berasal dari tabel apa? tabel tpelanggan
Field apa yang ditampilkan? nama, alamat
Kondisi/kriteria bagaimana? tidak ada kriteria

SELECT nmlgn, almlgn
FROM tpelanggan;

- Tampilkan nama barang dari tabel barang

3. Menggunakan fungsi alias (AS)
--> digunakan untuk mengganti tampilan kolom/field

Struktur :

SELECT namafield AS namafieldbaru
FROM namatabel;

Contoh
- Tampilkan nama dan alamat pelanggan.

SELECT nmlgn AS nama_pelanggan,
       almlgn AS 'alamat pelanggan'
FROM tpelanggan;

jika didalam tanda kutip, maka boleh ada spasi
jika tidak didalam tanda kutip, boleh menggunakan spasi

SELECT nmlgn nama_pelanggan,
       almlgn 'alamat pelanggan'
FROM tpelanggan;

4. Menampilkan isi tabel dengan kondisi/kriteria tertentu

struktur :

SELECT namafield1, namafield2, .....
FROM namatabel
[WHERE kondisi];

Macam-macam kondisi :
- Operator perbandingan : <, <=, >, >=, =, <> atau !=

Contoh :
1. Tampilkan data barang yang satuannya selain dari unit

SELECT * FROM tbrg
WHERE satuan != 'Unit';

2. Tampilkan nama pelanggan, alamat dan kota untuk pelanggan yang tinggal di kota Padang

SELECT nmlgn 'nama pelanggan',
       almlgn alamat,
       kota
FROM tpelanggan
WHERE kota = 'Padang';

5. Menampilkan data secara unik

Struktur : 
SELECT DISTINCT namafield from namatabel;

Contoh :
Tampilkan satuan yang ada di tabel barang.

Macam-macam kondisi :
- Operator perbandingan : <, <=, >, >=, =, <> atau !=
- Operator logika 
     AND     &&
     OR      ||
     NOT      !

Contoh :
- Tampilkan data barang dengan kode B001 dan B003.

SELECT * FROM tbrg
WHERE kdbrg = 'B001' AND kdbrg = 'B003';
--> empty set karena tidak ada barang yang memiliki kode B001 sekaligus B003

SELECT * FROM tbrg
WHERE kdbrg = 'B001' OR kdbrg = 'B003';

- Tampilkan data barang yang satuannya unit tetapi bukan barang dengan kode B001

kondisi 1 --> satuan = 'unit'
kondisi 2 --> kdbrg <> 'B001'

SELECT * FROM tbrg
WHERE satuan = 'Unit' AND kdbrg <> 'B001';

Laporan dan Tugas dikumpulkan paling lambat Minggu depan :
1. Buat laporan tentang UPDATE, DELETE dan Query 1 tabel.

FORMAT :
     DASAR TEORI (JOB/SUMBER LAIN) 
     DDL 
         - UPDATE DAN DELETE
     DML 
         - Query 1 tabel dengan operator relasi dan            logika
    ALAT DAN BAHAN
    LANGKAH KERJA
    TUGAS DAN PEMBAHASAN
    REFERENSI

2. Siapkan 3 macam database :
   Database dbpenjualan : tbrg dan tpelanggan
   Database perkuliahan : tmhs (hal 113), tdosen (hal 126) dan tkuliah (hal 118)
   Database disiapkan beserta isinya.

3. Kerjakan tugas hal 113 dan gabungkan dengan laporan


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



DATA MANIPULATION LANGUAGE
-------------------------
    INSERT, UPDATE dan DELETE, SELECT

SELECTION
----------
  --> perintah untuk menampilkan semua data / beberapa data dari satu atau lebih tabel

1. SELECT dengan ekspresi
  --> seleksi tidak berkaitan dengan tabel tetapi menggunakan ekspresi sederhana (berasal dari sebuah fungsi)

 contoh :
   SELECT 2;
   SELECT 10+2;
   SELECT 10+3, 10-3, 10*3, 10/3;
   SELECT 'Jurusan Teknologi Informasi';
   SELECT SQRT(81)as akar_kuadrat;
   SELECT POW(5,4) as 'pangkat 5';
   SELECT 'Teknik Komputer' FROM dual;

dual --> tabel dummy (tabel yang tidak ada maknanya, tapi digunakan seolah-olah seperti tabel)

2. Operator alias --> as
     --> digunakan untuk pemberian nama tampilan kolom

    SELECT namafield as namafieldbaru
    FROM namatabel;
  
penamaan field baru mengikuti aturan penamaan variabel, kalau ingin menggunakan spasi, nama field baru diapit oleh tanda petik 

Penulisan as --> dihilangkan
     SELECT 10+3 as tambah;
bisa disederhanakan 
      SELECT 10+3 tambah;  

2. QUERY 1 tabel
  A. Menampilkan isi seluruh tabel (seluruh kolom)
        SELECT * FROM namatabel
     COntoh :
        SELECT * FROM tbrg;

  B. Menampilkan hanya beberapa kolom
        SELECT namafield1, namafield2
        FROM namatabel;

     Contoh :
       Tampilkan nama dan alamat pelanggan
         SELECT nmlgn, almlgn
         FROM tpelanggan;
      atau
         SELECT nmlgn 'nama pelanggan',
                almlgn alamat
         FROM tpelanggan;

   C. Menampilkan data secara terurut
     Ada 2 proses urut / sort :
         - ascending/asc
            --> pengurutan naik (A-Z) atau kecil --besar
         - descending/desc
            --> turun (Z-A) atau besar - kecil
     Struktur :
        SELECT namafield1,namafield2
        FROM namatabel
        ORDER BY namafield ASC/DESC;

ASc redah ke tinggi secara urut
DESc tinggi ke rendah
   
   Pengurutan default --> ascending. Jadi kalau anda ingin menampilkan field terurut ascending, maka tidak perlu dituliskan asc nya.
     order by nama asc
cukup ditulis
      order by nama

  Contoh :
   1. Tampilkan nama barang dan satuan terurut berdasarkan nama barang
        SELECT nmbrg nama_barang, satuan
        FROM tbrg
        ORDER BY nmbrg;

   2. Tampilkan nama pelanggan, alamat dan kota, terurut secara terbalik berdasarkan nama pelanggan

   D. Menampilkan nilai field dengan membatasi jumlah baris/record yang akan ditampilkan
 Struktur :
       SELECT namafield1, namafield2
       FROM namatabel
       LIMIT jumlahrecord;

jumlahrecord --> banyak baris (integer)
Struktur gabungan :
       SELECT namafield1, namafield2
       FROM namatabel
       ORDER BY namafield ASC/DESC
       LIMIT jumlahrecord;

Contoh tampilkan 5 nama siswa dengan IPK tertinggi (misalkan nama dan IPK berada pada tabel siswa)
   
     SELECT nama, IPK
     FROM siswa
     ORDER BY IPK desc
     LIMIT 5;

Contoh : 
   Tampilkan 4 data barang secara terurut berdasarkan nama
      SELECT * FROM tbrg
      ORDER BY nmbrg
      LIMIT 4;

Bentuk lain dari klausa limit
    SELECT namafield1,namafield2
    FROM namatabel
    LIMIT barissetelah, jumlahrecord;

Contoh :
 Tampilkan 3 data barang setelah baris kedua
       SELECT * FROM tbrg
       LIMIT 2, 3;

  E. Menampilkan data secara unik
    --> data yang nilainya ganda/sama akan ditampilkan sekali saja
  Struktur :
        SELECT DISTINCT namafield
        FROM namatabel;

  Contoh : 
    Tampilkan data nilai satuan pada tabel barang
         SELECT DISTINCT satuan
         FROM tbrg;

   Tampilkan data kota asal pelanggan
===================================================
FOREIGN KEY

   dbjual :
      - tabel tbrg
      - tabel tpelanggan
      - tabel ttrans

FOREIGN KEY  : fieldrelasi (field/kolom yang menghubungkan antar tabel yang saling berelasi)

Contoh antara tabel tbrg dengan ttrans
    kdbrg adalah primary key (PK) di tabel tbrg
    kdbrg adalah foreign key (FK) di tabel ttrans

penulisan FK boleh saja berbeda dengan PK, tetapi tipe data dan constraint harus sama
  jadi kalau kdbrg di tbrg varchar(5), maka di ttrans harus varchar(5) walaupun nama kolom kode_barang

Struktur PK
  cara 1 :
     CREATE TABLE namatabel
       (
          .....,
          PRIMARY KEY(namafield)
       );

   cara 2 :
      CREATE TABLE namatabel
        (
           namafield tipedata not null primary key,
           ...
        );

   cara 3 :
       ALTER TABLE namatabel 
       ADD Primary key(namafield);

INGAT :
  PK dalam sebuah tabel cuma ada 1 --> bisa dari 1 kolom atau gabungan beberapa kolom (composite field)
  FK dalam sebuah tabel bisa lebih dari 1
   contoh : 
    tabel ttrans ada 2 FK
        - kdbrg --> merelasikan dengan tabel tbrg
        - kdlgn --> merelasikan dengan tabel tpelanggan

Sebuah tabel bisa punya PK dan FK
---------------------------
Untuk membuat tabel yang memiliki foreign key
cara 1 :
 dideklarasikan sewaktu pembuatan tabel :

    CREATE TABLE namatabel
     (
        ........., 
        ......,
        FOREIGN KEY(namafield)REFERENCES namatabel(namafield)
      
     );
 
contoh :
    CREATE TABLE ttrans
     (
       ....,
       kode_brg varchar(5),
       .....,
       foreign key(kode_brg) references tbrg(kdbrg)
     );

cara 2 :
  ALTER TABLE namatabel
  ADD  FOREIGN KEY(namafield)REFERENCES namatabel(namafield);
-----------------------------------------
Buatlah tabel ttrans di dbjual
  CREATE TABLE ttrans
    (
      nonota varchar(5),
      tgl date,
       kdlgn varchar(5),
       kdbrg varchar(5),
      jml int,
      hrg bigint(20),
      foreign key(kdlgn) references tpelanggan(kdlgn),
      foreign key(kdbrg) references tbrg(kdbrg)
    );

Isi tabel ttrans sesuai dengan halaman 123 jobsheet
------------------------------------------------------
BACKUP dan RESTORE

A. backup / export :
   filedatabase ----> backupfile.sql

  Cara backup :
    - Keluar dari root, dengan perintah exit
    - ketikkan perintah backup yang struktur sbb :
mysqldump -u root namadatabase > lokasi_dan_namafile.sql

 
B. Restore / Import
    file.sql ----> database yang ada di mysql

   cara restore :
   Contoh :
         database penampung : dbjual
          file : dbpenjualanTK2A.sql

     - pastikan database penampung ada
        CREATE DATABASE dbjual;
     
     - keluar dari root
            EXIT

     - perintah RESTORE
mysql -u root namadatabase < lokasi_dan_namafile.sql
    Jadi :
  mysql -u root dbjual < E:\dbpenjualanTK2A.sql
====================================================
DATABASE :
 1. dbjual 
      - tbrg 
      - tpelanggan
      - ttrans (2 FK)

2. dbprkuliahan
      - mahasiswa
      - dosen
      - kuliah
      - ambil (2 FK yakni no_bp dan kode)
      - ajar (2 FK yakni nip dan kode)

3. classicmodels
    - download file sample database
      use dbperku
    
    - extract file hasil download
          mysqlsampledatabase.sql

   - buat database --> classicmodels
   - restore/import mysqlsampledatabase.sql -- classicmodels

 mysql -u root classicmodels < E:/LATIHAN/mysqlsampledatabase.sql


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



Persiapkan database :
1. Database dbpenjualan
2. Database dbperkuliahan
3. Database classicmodels

Latihan import data:
1. Buat database classicmodels2
2. Lakukan import dari mysqlsampledatabase.sql

Query 1 tabel :
- Menampilkan isi keseluruhan tabel
  SELECT * FROM namatabel;

- Menampilkan isi table hanya untuk kolom tertentu saja
- Menggunakan fungsi alias (mengganti penamaan kolom) --> operator AS
- Mengurutkan data/record --> ASC dan DESC
- Membatasi jumlah record --> LIMIT
- Menampilkan data secara unik --> DISTINCT

struktur :

SELECT namafield1, namafield2 AS field_baru, .....
FROM namatabel
WHERE [kondisi]
ORDER BY namafield [ASC/DESC]
LIMIT jml_record;

Kondisi :
--> pernyataan logis benar/salah
contoh :
X --> tidak logis
X = 10 --> logis

Berbagai macam operator kondisi :
A. Operator relasi / perbandingan : <, >, <=, >=, =, != / <>
------------------------------------------------------------

Contoh :
1. Tampilkan seluruh data transaksi untuk nonota F001

nonota --> tabel ttrans

SELECT * FROM ttrans
WHERE nonota = 'F001';

SELECT * FROM ttrans
WHERE jml > 10;

'...'--> tipe data string
tidak berkutip --> tipe data numerik

2. Tampilkan tanggal transaksi, kode barang, harga untuk transaksi dengan harga minimal 100.000

tgl, kdbrg, hrg --> dari tabel ttrans

SELECT tgl, kdbrg, hrg
FROM ttrans
WHERE hrg >= 100000;

3. Tampilkan data pelanggan yang tidak tinggal di kota Bukittinggi.

SELECT * FROM tpelanggan
WHERE kota <> 'Bukittinggi';

SELECT * FROM tpelanggan
WHERE kota != 'Bukittinggi';

B. Operator Logika
------------------
AND --> &&
OR --> ||
NOT --> !

Contoh:
1. Tampilkan data transaksi yang melibatkan pelanggan dengan kode P002 yang membeli barang dengan kode B001

Kondisi 1 --> kode pelanggan P002
Kondisi 2 --> kode barang B001

SELECT * FROM ttrans
WHERE kdlgn = 'P002' AND kdbrg = 'B001';

2. Tampilkan data transaksi untuk pelanggan P001, P002 dan P003

SELECT * FROM ttrans
WHERE kdlgn = 'P001' OR kdlgn='P002' OR kdlgn='P003';

atau 

SELECT * FROM ttrans
WHERE kdlgn = 'P001' || kdlgn='P002' || kdlgn='P003';

3. Tampilkan barang yang dibeli oleh pelanggan dengan kode P001 yang harganya dibawah 500.000

kondisi 1 --> kode pelanggan P001
kondisi 2 --> hrg dibawah 500.000

SELECT kdbrg, kdlgn, hrg
FROM ttrans
WHERE kdlgn = 'P001' AND hrg < 500000;

C. Operator Aritmatika
----------------------
*
/
+
-
div
mod
sqrt
pow

Contoh :
1. Tampilkan tanggal, kode pelanggan, kode barang, harga, jumlah dan total. Total diperoleh dari hasil perkalian antara hrg dan jml.

SELECT tgl, kdlgn, kdbrg, hrg, jml, hrg*jml AS total
FROM ttrans;

2. Tampilkan 5 data transaksi total tertinggi yang terdiri dari tanggal, kode pelanggan, kode barang, hrg, jml dan total.

    SELECT tgl, kdlgn,kdbrg, hrg,jml, hrg*jml total
    FROM ttrans
    ORDER BY total desc
    LIMIT 5;

3. Tampilkan data transaksi yang totalnya diatas 500000
    SELECT *, hrg * jml as total
    FROM ttrans
    WHERE hrg*jml >500000;
====================================================================
A. DBPERKULIAHAN
 1. Tampilkan semua data pengajaran yang dilakukan pada hari senin

2. Tampilkan no bp mahasiswa yang mendapatkan nilai A. Tampilkan 3 data saja, urutkan berdasarkan kode mata kuliah

3. Tampilkan kode kuliah, nama mata kuliah yang jumlah SKS nya minimal 2. Urutkan berdasarkan jumlah SKS tertinggi

4. Tampilkan NIP dan lokal dosen yang mengajar selain hari Rabu

B.CLASSICMODELS
1. Tampilkan 10 data productname, productline, buyprice untuk seluruh produk berjenis(product line) classic cars. Urutkan berdasarkan harga pembelian tertinggi

SELECT productName, productLine, buyPrice 
FROM products
WHERE productLine = 'classic cars'
ORDER BY buyprice DESC
LIMIT 10;


2. Tampilkan customernumber, tanggal pembayaran dan jumlah/amount dari tabel payments yang dilakukan oleh customernumber 103. urutkan berdasarkan jumlah pembayaran tertinggi

SELECT customerNUmber, paymentDate, amount
FROM payments
WHERE customerNumber = '103'
ORDER BY amount DESC;

3. tampilkan 10 data detailorder dengan total tertinggi. Total diperoleh dari quantityordered *priceeach

SELECT *, quantityOrdered*priceEach AS total
FROM orderDetails
ORDER BY total DESC
LIMIT 10

4. Siapa saja yang memberikan laporan kepada manajer dengan kode 1143? Tampilkan firstname dan lastname, urutkan berdasarkan lastname

SELECT firstname, lastname FROM employees
WHERE reporrtTo = '1143'
ORDER BY lastname;

5. Tampilkan alamat kantor yang berada di daerah territory Jepang

SELECT addressLine1
FROM offices
WHERE territory = 'japan';

 6. Tampilkan tanggal order, tanggal disetujui(requiredate) dan tanggal pengiriman yang memiliki statusnya telah dikirim (shipped), tampilkan 10 data saja dan urutkan berdasarkan tanggal pengiriman

SELECT orderDate requiredDate, shippedDate
FROM orders
ORDR BY shippedDate
LIMIT 10;

7. MSRP  pada tabel products merupakan singkatan Manufacturer Suggested Retail Price, yaitu harga minimum penjualan yang dianjurkan oleh perusahaan. Tampilkan nama produk, harga pembelian, dan harga MSRP untuk produk dengan jenis ships. Urutkan berdasarkan MSRP. 

SELECT productNAme, buyPrice, MSRP
FROM products
WHERE productLine = 'ships'
ORDER BY MSRP;

8. Tampilkan riwayat order untuk customer dengan nomor 486

SELECT * FROM payments
WHERE customerNumber = '486';

9. Tampilkan 20 data nama produk, jumlah stok tersedia dari tabel produk. Tampilkan berdasarkan stok yang paling banyak yang stoknya diatas 5000

SELECT productName, quantityInStock
FROM products
WHERE quantityInStock > '5000'
ORDER BY quantityInStock DESC
LIMIT 20;

10. Tampilkan city  dari tabel office yang statenya selain NY secara unik.urutkan

SELECT DISTINCT city
FROM offices
WHERE state <> 'NY'
ORDER BY city;


===================================================
DB PERKULIAHAN
1. Tampilkan mata kuliah yang diajarkan di semester 1 yang sksnya 2

2. Tampilkan no bp mahasiswa yang mendapatkan nilai A pada kode kuliah TI111

3. Nilai apa saja yang didapatkan oleh mahasiswa dengan no bp 13501001 dan 13501004

4. Tampilkan siapa saja mahasiswa yang mendapatkan nilai A dan B pada kodekuliah Ti111

5. Tampilkan data siapa saja yang mendapatkan nilai A pada kuliah Ti111 dan Ti123


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



Query 1 tabel
--> merikues record yang berasal dari 1 tabel.

Struktur :

SELECT namafield1, namafield2, ...
FROM nama tabel
[WHERE kondisi]
ORDER BY namafield ASC/DESC
LIMIT banyakrecord;

Macam-macam operator kondisi :
------------------------------
1. Operator Perbandingan :
   < > <= >= = <>/!=

2. Operator Logika
   AND &&
   OR ||
   NOT !
-------------------------------
DB PERKULIAHAN :

1. Tampilkan mata kuliah yang diajarkan di semester 1 yang sksnya 2
   kondisi 1 --> semester = 1
   kondisi 2 --> sks = 2

   SELECT * FROM t_kuliah
   WHERE semester = 1 AND sks = 2;        

2. Tampilkan no bp mahasiswa yang mendapatkan nilai A pada kode kuliah TI111
   kondisi 1 --> nilai = A
   kondisi 2 --> kode = TI111

   SELECT no_bp FROM t_ambil
   WHERE nilai = 'A' && kode = 'TI111';  
 
3. Nilai apa saja yang didapatkan oleh mahasiswa dengan 
   no bp 13501001 dan 13501004
   kondisi 1 --> no_bp = 13501001
   kondisi 2 --> no_bp = 13501004

   SELECT nilai FROM t_ambil
   WHERE no_bp = '13501001' || no_bp = '13501004';
    

4. Tampilkan siapa saja mahasiswa yang mendapatkan 
   nilai A dan B pada kodekuliah Ti111
   kondisi 1 --> nilai A dan B
   kondisi 2 --> kode TI111

   SELECT * FROM t_ambil
   WHERE kode = 'TI111' AND nilai = 'A' OR nilai = 'B';
     

5. Tampilkan data siapa saja yang mendapatkan nilai A pada kuliah Ti111 dan Ti123
   kondisi 1 --> nilai = A
   kondisi 2 --> kode TI111 dan TI123
   
   SELECT * FROM t_ambil
   WHERE nilai = 'A' AND (kode = 'TI111' OR kode = 'TI123');
-------------------------------------------------------------------

3. Operator IN dan NOT IN
--> untuk menampilkan data yang kriterianya ada pada salah satu nilai
didalam IN / NOT IN

struktur :
SELECT namafield1, namafield2, .....
FROM namatabel
WHERE namafield IN/NOT IN (nilai1, nilai2, ....);

Soal :
1. Tampilkan nama barang dengan kode B001, B002 dan B005

SELECT * FROM tbrg
WHERE kode = 'B001' OR kode = 'B002' OR kode = 'B005';

SELECT * FROM tbrg
WHERE kdbrg IN('B001', 'B002','B005');

2. Tampilkan data mahasiswa yang tidak mendapatkan nilai A atau B.

SELECT * FROM nilai
WHERE nilai NOT IN ('A','B');

3. Tampilkan data mahasiswa yang mendapatkan nilai A dan B 
pada kode kuliah TI111 dan TI123
-------------------------------------------------------------

4. Operator LIKE dan NOT LIKE
---> menampilkan data dengan nilai yang sesuai kriteria tertentu 
untuk data dengan tipe selain numerik.

struktur :

SELECT namafield2, namafield2, ....
FROM namatabel
WHERE namafield LIKE/NOT LIKE '....';

Kriteria --> berupa karakter

ketentuan:
_ --> mewakili 1 karakter
% --> mewakili sembarang karakter (0 - dst)

Contoh :

A_ --> 2 karaker, yang diawali dengan huruf A : Ab, Ac, Ad, 

A% --> diawali dengan huruf A, dengan jumlah karakter tak hingga
       A, Aku, Angga, Ali Syahbana.

%komputer% --> akan mencari data yang mengandung kata-kata 
               'komputer'.

A_u --> Abu, Adu, Aku

R%o --> Ridho, Rimo, Redho

Contoh :
1. Tampilkan nama mahasiswa yang diawali dengan huruf A
   SELECT nama FROM t_mahasiswa
   WHERE nama LIKE 'A%';

2. Tampilkan nama dosen yang tidak berakhiran a.

3. Pada database classicmodels tampilkan employeenumber, lastname
dan first name untuk employees dengan job title yang ada kata
'sales man'

4. Tampilkan identitas mahasiswa yang namanya diawali huruf A 
tetapi selain Albinanto.

5. Tampilkan nama dan nobp mahasiswa yang karakter ke 3 dan 4 nobp
adalah 11.

SELECT nama, no_bp from t_mahasiswa
WHERE no_bp LIKE '__11%';
------------------------------------------------------------------------

5. Operator BETWEEN dan NOT BETWEEN
--> menampilkan kondisi yang memiliki nilai yang ada dalam range tertentu.

Struktur :

SELECT namafield1, namafield2, ....
FROM namatabel
WHERE namafield BETWEEN / NOT BETWEEN nilai1 AND nilai2;

Catatan :
- ini hanya untuk field yang memiliki range tertentu
- jika karakter, tetap diapit oleh tanda kutip ('...')

Contoh :
1. Tampilkan data mahasiswa yang lahir di tahun 1983.
--> 1983 : 1 Januari 1983 sampai 31 Desember 1983

SELECT * FROM t_mahasiswa
WHERE tgl_lahir BETWEEN '1983-01-01' AND '1983-12-31';

atau :

SELECT * FROM t_mahasiswa
WHERE tgl_lahir BETWEEN '19830101' AND '19831231';


2. Tampilkan data transaksi yang terjadi diluar tahun 2008,
urutkan berdasarkan tanggal paling akhir.


TUGAS LAPORAN:
Silahkan dikerjakan soal-soal berikut dan jadikan lampiran dalam laporannya:

Soal dbjual
===========
1. Tampilkan data transaksi yang terjadi selain Bulan September 2008, tetapi yang jumlah penjualannya diatas 10 buah. Urutkan berdasarkan harga tertinggi
      
Soal dbperkuliahan :
=====================
1. Siapa saja dosen yang lahir pada tahun 1960-an?? Tampilkan identitas semua dosen

2. Siapa saja mahasiswa yang tinggal di asrama yang namanya tidak berawalan G

3. Tampilkan mahasiswa yang lahir tahun 1984 dan selain yang memiliki nomor bp 13501001 dan 13501003


soal classicmodels:
===================
1. Tampilkan officecode, city, phone dan country yang hanya di USA dan France saja

SELECT officecode, city,phone, country
FROM offices
WHERE country IN ('USA','France');

2. Tampilkan customername,country dan state untuk seluruh customer yang tinggal di state CA country USA

SELECT customername, country, state
FROM customers
WHERE state IN ('CA','USA');

3. Tampilkan seluruh order yang terdiri dari ordernumber,orderdate, requireddate pada tabel orders untuk seluruh order yang terjadi pada tahun 2004 dan statusnya bukan shipped

SELECT orderNumber, orderDAte, requiredDate
FROM orders
WHERE orderDate between '2004-01-01' AND '2004-12-31'
AND status NOT IN ('shipped');

4. Tampilkan nama produk, stok, harga pembelian (buyprice) pada tabel produk untuk produk dengan stok diatas 5000 dan harga pembelian antara 60 - 90

SELECT productNAme, quantityInStoct, buyPRice
FROM products
WHERE quantityInStock > 5000
AND buyPrice BETWEEN 60 AND 90;

5. Tampilkan nama produk, harga produk dan kode produk untuk produk dengan harga pembelian 50-80 untuk barang yang memiliki nama ford

SELECT productNAme, productLine, productCode
FROM products
WHERE buyPrice BETWEEN 50 AND 80
AND productNAme LIKE '%ford%';

6. Tampilkan data order yang terjadi pada Bulan Januari tahun 2003 dan barangnya dikirim pada bulan Februari 2003

SELECT * FROM orders
WHERE orderDate BETWEEN '20030101' AND '20030131'
AND (shippedDAte BETWEEN '20020201' AND '20030229');

7. Tampilkan customername, state, country, creditlimit untuk customer yang limitkreditnya diatas 100000 tetapi tidak dari USA

SELECT customerNAme, state, country, creditLimit
FROM customers
WHERE creditLimit > 100000
AND country NOT LIKE 'USA';

8. Tampilkan 10 data orders berupa ordernumber, orderdate dan status untuk tanggal order yang terjadi diluar tahun 2003 dan statusnya bukan shipped. Urutkan berdasarkan tgl order.

SELECT ordeNumber, orderDate, status
FROM orders
WHERE orderDate NOT BETWEEN '20030101' AND '20031231'
AND status NOT LIKE 'shipped'
ORDER BY orderDate ASC LIMIT 10;



Soal dbjual
===========
1. Tampilkan data transaksi yang terjadi selain Bulan September 2008, tetapi yang jumlah penjualannya diatas 10 buah. 
Urutkan berdasarkan harga tertinggi
      
Soal dbperkuliahan :
=====================
1. Siapa saja dosen yang lahir pada tahun 1960-an?? Tampilkan identitas semua dosen

2. Siapa saja mahasiswa yang tinggal di asrama yang namanya tidak berawalan G

3. Tampilkan mahasiswa yang lahir tahun 1984 dan selain yang memiliki nomor bp 13501001 dan 13501003





@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


Operator Kondisi :
  - Operator relasi/perbandingan
       < <= > >= = <> atau !=
  - Operator logika 
       AND &&
       OR ||
       NOT !
  - Operator IN dan NOT IN
  - Operator LIKE dan NOT LIKE
  - Operator BETWEEN dan NOT BETWEEN

Operator IS dan IS NOT NULL
  --> operator yang digunakan untuk menyaring data yang kosong (nilainya NULL)

Contoh :
   dbjual --> tpelanggan
   Inputkan 2 buah data pelanggan 
   INSERT INTO tpelanggan(kdlgn,nmlgn,kota) VALUES
     ('P010','Rudi','Solok'),
     ('P015','Citra','Padang');


 Kalau ingin menampilkan data-data pelanggan yang tidak memiliki kode pos
Kalau dikerjakan :
   SELECT * FROM tpelanggan WHERE kdpos='NULL';
     --> empty karena tidak ada yang kodepos bernilai NULL (artinya memang nilai kode pos yang dicari NULL)


   SELECT * FROM tpelanggan WHERE kdpos IS NULL;

Contoh :
 classicmodels

1. Tampilkan data customers yang terdiri dari customername, addressline1, addressline2,city, state yang nama customernya ada unsur Inc, yang addressline2 dan state tidak kosong. --> 5 records

SELECT customerName, addresLIne1, addressLine2, city, state
FROM customers
WHERE customerName LIKE '%Inc%' AND (addresLine2 IS NOT NULL AND state IS NOT NULL);

2. Tampilkan data customer terdiri dari nama, negara dan salesrepemployeenumber untuk customer yang salesrepemployeenumber nya tidak kosong dan tdk berasal dari negara Jerman, Spanyol, USA, UK, Perancis dan Australia --> 34 

SELECT customerName, country, saleRepEmployeeNumber
FROM customers
WHERE saleRepEmployeeNumber IS NOT NULL and country NOT IN ('germany','Spain','USA','France','Australia');

3. Tampilkan 10 data customers (terdiri dari customername, addressline1, addressline2, city dan creditlimit), untuk customer yang tidak punya alamat alternatif (addressline 2 kosong) dan creditlimitnya 0. Tampilkan terurut berdasarkan nama --> 10

SELECT customerName, addresLine1, adrresLine2, city, creditLimit
FROM customers
WHERE addressLine2 IS NULL
AND creditLimit = 0
ORDER BY customerName LIMIT 10;
----------------------------------------------------------------
FUNGSI
--------
  1. Fungsi yang sudah merupakan bawaan dari program sehingga tidak perlu didefinisikan tinggal dipergunakan
  2. Fungsi yang harus didefinisikan dulu baru bisa digunakan.


Beberapa fungsi bawaan SQL :
   - fungsi numerik
   - fungsi string
   - fungsi date/time
   - fungsi kontrol (control flow function) -- IF dan CASE
   - fungsi aggregate

FUNGSI NUMERIK
--------------
  --> fungsi bawaan MySQL yang digunakan untuk mengolah data numerik (int, decimal, double, float)

1. CEIL() atau CEILING()
   --> digunakan untuk melakukan pembulatan keatas
   struktur :
       SELECT CEIL/CEILING(argumen);

    argumen --> berupa nilai numerik atau bisa berupa field dengan tipe numerik

   contoh :
      SELECT CEIL(6.6); --> 7
      SELECT CEIL(6.1); --> 7
      SELECT CEILING(6.001); -->7

2. FLOOR()
    --> digunakan untuk pembulatan kebawah
    Struktur :
        SELECT FLOOR(argumen);
    Contoh :
       SELECT FLOOR(6.9); --> 6
       SELECT FLOOR(6.3); --> 6
       SELECT FLOOR(6.99); -->6
   
3. ROUND()
  --> pembulatan matematis
  --> digunakan untuk pembulatan keatas atau kebawah tergantung pada nila pecahan. Jika kurang dari 0.5 maka dibulatkan kebawah, jika besar atau sama dngan 0.5 dilakukan pembulatan keatas

Untuk fungsi round --> bisa dimanfaatkan dengan 1 argumen dan 2 argumen. Berbeda dengan fungsi floor dan ceil yang hanya butuh 1 argumen

   Struktur :
      SELECT ROUND(argumen1,argumen2);
    
    argumen1 : angka pecahan yang akan dibulatkan
    argumen2 : jumlah digit desimal yang diinginkan.
      Jika argumen2 tidak ditulis (cuma ada 1 argumen dalam fungsi round), berarti tidak ada angka dibelakang koma

Contoh :
  Fungsi round dengan 1 argumen
      SELECT ROUND(5.9); --> 6
      SELECT ROUND(5.4); --> 5

  Fungsi round dengan 2 argumen
     SELECT ROUND(2.673,1); --> 2.7
     SELECT ROUND(2.648,1); --> 2.6
     SELECT ROUND(2.648,2); --> 2.65
     SELECT ROUND(3.5,3); --> 3.500  


4. TRUNCATE()
   kalau truncate table digunakan utk ??
    truncate table tbrg; --> mengosongkan isi seluruh tabel tanpa mengubah struktur

    --> fungsi truncate() digunakan untuk memotong angka desimal sesuai dengan jumlah angka di argumen kedua tanpa melakukan pembulatan keatas maupun kebawah.
   Struktur :
      SELECT TRUNCATE(argumen1, argumen2);
   argumen 1 : nilai desimal yang akan dipotong (field numerik)
   argumen 2 : banyak angka dibelakang koma

     SELECT TRUNCATE(2.673,1); --> 2.6
     SELECT TRUNCATE(2.648,1); --> 2.6
     SELECT TRUNCATE(2.648,2); --> 2.64
     SELECT TRUNCATE(2.648,0); --> 2
   

5. DIV
   --> menampilkan hasil bagi bulat
    Contoh :
          SELECT 10 DIV 3; --> hasilnya 3
          SELECT 3 DIV 10; --> hasilnya 0

6. MOD
    --> menampilkan sisabagi
    Contoh : 
         SELECT 10 MOD 3; --> 1
         SELECT 3 MOD 10; --> 3
         SELECT 10 % 3;
   SELECT 10 MOD 3; --> bisa ditulis SELECT MOD(10,3);

7. SQRT
    --> digunakan untuk mencari akar kuadrat. 
    --> Fungsi ini hanya membutuhkan sebuah argumen berupa angka yang akan dicari nilai kuadratnya
 
Contoh :
        SELECT SQRT(81); --> 81

       SELECT ROUND(SQRT(20),2); 

8. POW() atau POWER()
  --> digunakan untuk mencari nilai pangkat.
  --> FUngsi ini butuh 2 argumen berupa bilangan dasar dan bilangan pangkat
 
  Contoh :
    SELECT POW(5,3); --> 5 pangkat 3 --125
    
    SELECT ROUND(POW(2.5,5),1); --> 2.5 pangkat 3

9. ABS()
  --> digunakan untuk menampilkan nilai absolut/mutlak.
  --> fungsi ini hanya butuh 1 argumen. Jika argumen berupa angka positif maka akan langsung dikembalikan. Jika argumen bernilai negatif, maka akan diubah menjadi positif

   COntoh :
       SELECT ABS(10); -- hasilnya 10
       SELECT ABS(-10); -- hasilnya 10
===============================================================
TUGAS
DBJUAL (3 SOAL)

1 .Semua barang mendapatkan diskon sebesar 5% dari total harga(jml*hrg). Tampilkan nonota,kdbrg, totalharga sebelum diskon, diskon dan total harga setelah diskon. Semua perhitungan gunakan pembulatan keatas

    SELECT nonota,kdbrg, CEIL(jml*hrg) as total,
           CEIL(0.05*jml*hrg) as diskon,
          CEIL((jml*hrg)-(0.05*jml*hrg)) as tot_bayar
    FROM ttrans;

atau 
    SELECT nonota,kdbrg, CEIL(jml*hrg) as total,
           CEIL(0.05*jml*hrg) as diskon,
            CEIL(0.95*jml*hrg) as tot_bayar
    FROM ttrans;


2.  Untuk total pembelian yang lebih dari Rp.1.000.000,- akan mendapatkan diskon sebesar 5%. Tampilkan nonota, kdbrg, total harga sebelum diskon, diskon, total harga setelah diskon.(pembulatan kebawah)

3. untuk pelanggan dengan kode P002 diharuskan membayar pajak barang sebanyak 10% dari total harga. Tapi hanya barang yang dibeli ditahun 2005 dan barang yang harganya diatas Rp.500.000,-. tampilkan data transaksi lengkap dengan besaran pajaknya.(lakukan pembulatan)
---------------------------

CLASSICMODELS (7 SOAL)

1. Untuk pelanggan yang melakukan pembayaran pada bulan januari 2003 dari tabel payments, wajib membayar pajak sebanyak 10% dari amount. Tampilkan semua field dan besaran pajak lakukan pembulatan keatas dan urutkan berdasarkan paymentdate.

SELECT *, CEIL(0.1*amount) as 'Pajak'
FROM payments
WHERE paymentDate BETWEEN '20030101' AND '20030131'
ORDER BY paymentDate;

2. Carilah berapa total harga yang didapatkan Untuk penjualan product yang bernama Harley dari tabel products, tetapi hanya untuk buyprice yang nilainya dibawah 50. Lakukan pembulatan.

SELECT productNAme, buyPrice, quantityInstock,
ROUND (buyPrice * quanityInStock) AS 'Total Price'
FROM products
WHERE productNAme LIKE '%Harley%' AND buyPrice < 50;

3. Pada tabel orders terdapat orderdate dan shippeddate. Tampilkan lamanya waktu tunggu dari order hingga pengiriman, untuk status yang barangnya telah dikirim (shipped) dan terjadi pada tahun 2004, urutkan dari bulan order desember.

SELECT orderDAte, shippedDate, ABS(orderDAte - shippedDAte) AS 'Waktu Tunggu'
FROM orders
WHERE status = 'shipped' AND shippedDate BETWEEN '20040101' AND '20041231'
ORDER BY orderDate DESC;

4. MSRP adalah  manufacturer suggested retail price atau harga eceran yang disarankan. Total harga masing2 product adalah quantity instock * msrp. Nilai keuntungan bisa didapatkan dari msrp dikurangi dengan buy price. Kira-kira berapa keuntungan yang didapatkan dari penjualan masing-masing product. Tampilkan msrp, quantityinstock, total, keuntungan, productvendor untuk product yang diproduksi oleh Min Lin Diecast. Lakukan pembulatan kebawah.

SELECT MSRP, quantityInstock,
FLOOR (quantityInStock * MSRP) AS 'Total Price',
FLOOR ((MSRP-buyprice) * quantityInStock) AS 'Profit', productVendor
FROM products
WHERE productVendor LIKE '%min Ln Diecast%';

5. Profit diperoleh dari selisih msrp dan buyprice. Tampilkan 10 data profit tertinggi untuk produk dengan jenis(productline) Classic cars. Tampilkan productname, productline, msrp, buyprice dan profit. Lakukan pembulatan matematis (round) utk msrp, buyprice dan profit

SELECT productNAme, PRoductLine,
ROUND (MSRP), ROUND(buyprice), ROUND(MSRP-buyprice) AS 'profit'
FROM products
WHERE productline LIKE '%classic Cars%'
ORDER BY (MSRP-buyprice_ DESC LIMIT 10;


6. Totalprice adalah hasil kali dari Quantityordered dengan priceeach pada tabel orderdetails. Diskon diberikan 10% dari totalprice. Tampilkan ordernumber,productcode, quantityordered, priceeach, total, diskon,payment (total-diskon) untuk 10 data dengan payment tertinggi yang quantityorderednya diantara 20 sampai 30 dan nomor order nya bukan 10420, 10423, 10425 . Lakukan pembulatan keatas untuk priceeach dan payment

SELECT orderNUmber, productCode, quantityOrdered, CEIL(priceEach),(quantityOrdered * priceEach) AS 'Total Price',
(0.1 * quantityOrdered * priceEAch) AS 'Diskon,
CEIL ((quantityOrdered * priceEAch)-(0.1 * quantityOrdered * priceEAch)) AS 'Payment'
FROM orderdetails
WHERE quantityOrdered BETWEEN '20' AND '30' AND orderNumber NOT IN ('10420','10423','10425')
ORDER BY payments DESC LIMIT 10;

7. Untuk pelanggan yang melakukan pembayaran pada bulan januari 2003 dari tabel payments, wajib membayar pajak sebanyak 10% dari amount. Tampilkan semua field dan besaran pajak lakukan pembulatan keatas dan urutkan berdasarkan paymentdate.

SELECT *, CEIL (0.1*amount) AS 'Pajak'
FROM payments
WHERE paymentDAte BETWEEN '20030101' AND 20030131'
ORDER BY paymentDAte;
==================================================



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@




Tanggal 17 November 2021

fungsi di mysql;

ada 2 jenis fungsi:
1.fungsi bawaan dri program /aplikasi
2. ... yang didefinisakn oleh programer

1. numerik yang digunakan untuk mnegolah data angka, tipe: integer, decimal, float, double, ddl
	ex: ceil/ceiling,flooe,round,truncate,mod,sqrt,dll

fungsi bawaan sql;
1, numerik
2. string
3. date/time
4. comparison
5. control floe function
5. aaggregate

==========================================================================================
2. fungsi sting
.....dugunakan untuk manifulasi data string.

Tipe data : char, varchar, text, dll


JEnis"
A. UCASE()  atau UPPER()
.......mengubah tampilan string menjadi huruf besar.

contoh:
		SELECT UCASE('Selamat pagi PNP');

 SELECT UCASE('Selamat pagi PNP');
+---------------------------+
| UCASE('Selamat pagi PNP') |
+---------------------------+
| SELAMAT PAGI PNP          |
+---------------------------+
1 row in set (0.004 sec)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

		SELECT UPPER('Teknik Komputer');

SELECT UPPER('Teknik Komputer');
+--------------------------+
| UPPER('Teknik Komputer') |
+--------------------------+
| TEKNIK KOMPUTER          |
+--------------------------+
1 row in set (0.000 sec)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

=============================================================================================

B. LCASE() atau LOWER()
.......mengubah tampilan string menjadi huruf kecil.



		SELECT LCASE('Selamat Pagi PNP');

SELECT LCASE('Selamat Pagi PNP');
+---------------------------+
| LCASE('Selamat Pagi PNP') |
+---------------------------+
| selamat pagi pnp          |
+---------------------------+
1 row in set (0.004 sec)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

		SELECT LOWER('Teknik Komputer');

SELECT LOWER('Teknik Komputer');
+--------------------------+
| LOWER('Teknik Komputer') |
+--------------------------+
| teknik komputer          |
+--------------------------+
1 row in set (0.000 sec)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#.....Tampilkan nama pelanggan dengan huruf kapital dan alamat dengan huruf kecil dari tpelanggan di database dbjual.
	
#......select UCASE(nmlgn) AS nama, LCASE(almlgn) AS alamat from tpelanggan;

 select UCASE(nmlgn) AS nama, LCASE(almlgn) AS alamat from tpelanggan;
+--------------+-----------------+
| nama         | alamat          |
+--------------+-----------------+
| GALAXY MEDIA | birugo          |
| GAMATECHNO   | anduring        |
| CITRA MOZAIC | jl. veteran     |
| JJ ENT       | khatib sulaiman |
| GREEN MEDIA  | jambu air       |
| TK. INTAN    | jl.s.hatta      |
| ONEXINDO     | pauh            |
| RUDI         | NULL            |
| CITRA        | NULL            |
+--------------+-----------------+
9 rows in set (0.004 sec)

=============================================================================================

C. CONCAT()
.......Digunakan untuk menyambung 2 buah string/ lebih.
	
	Struktur:
	SELECT CONCAT(String1,String2,.....)

	Contoh:
	SELECT CONCAT('Teknik','Komputer');

SELECT CONCAT('Teknik','Komputer');
+-----------------------------+
| CONCAT('Teknik','Komputer') |
+-----------------------------+
| TeknikKomputer              |
+-----------------------------+
1 row in set (0.004 sec)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

	SELECT CONCAT('Teknik',' ','Komputer');

 SELECT CONCAT('Teknik',' ','Komputer');
+---------------------------------+
| CONCAT('Teknik',' ','Komputer') |
+---------------------------------+
| Teknik Komputer                 |
+---------------------------------+
1 row in set (0.000 sec)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

	SELECT UCASE(CONCAT('Teknik',' ','Komputer'));

SELECT UCASE(CONCAT('Teknik',' ','Komputer'));
+----------------------------------------+
| UCASE(CONCAT('Teknik',' ','Komputer')) |
+----------------------------------------+
| TEKNIK KOMPUTER                        |
+----------------------------------------+
1 row in set (0.000 sec)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

	SELECT LCASE(CONCAT('Teknik',' ','Komputer'));

SELECT LCASE(CONCAT('Teknik',' ','Komputer'));
+----------------------------------------+
| LCASE(CONCAT('Teknik',' ','Komputer')) |
+----------------------------------------+
| teknik komputer                        |
+----------------------------------------+
1 row in set (0.000 sec)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

Tampilkan nama lengkap customer(firstname dan lastname) dari customer yang tinggal diUSA. tampilkan hanya 10 data saja dan urutkan berdasarkan nama lengkap.


 select  CONCAT(contactFirstName,' ',contactLastName) AS ContactFullName, country
    -> FROM customers
    -> WHERE country like '%USA%'
    -> ORDER BY ContactFullName limit 10;

select  CONCAT(contactFirstName,' ',contactLastName) AS ContactFullName, country
    -> FROM customers
    -> WHERE country like '%USA%'
    -> ORDER BY ContactFullName limit 10;
+---------------------+---------+
| ContactFullName     | country |
+---------------------+---------+
| Allen Nelson        | USA     |
| Brian Chandler      | USA     |
| Dan Lewis           | USA     |
| Dorothy Young       | USA     |
| Francisca Cervantes | USA     |
| Jean King           | USA     |
| Jeff Young          | USA     |
| Jerry Tseng         | USA     |
| Julie Brown         | USA     |
| Julie King          | USA     |
+---------------------+---------+
10 rows in set (0.001 sec)


======================================================================================

D. FORMAT()
.....digunakan untuk memformat angka. 
	misalnya : 7526000 -> 7,526,000

	SELECT FORMAT(7526000.34567, 2);

 SELECT FORMAT(7526000.34567, 2);
+--------------------------+
| FORMAT(7526000.34567, 2) |
+--------------------------+
| 7,526,000.35             |
+--------------------------+
1 row in set (0.005 sec)

	SELECT FORMAT(7526000.341212, 4);

SELECT FORMAT(7526000.341212, 4);
+---------------------------+
| FORMAT(7526000.341212, 4) |
+---------------------------+
| 7,526,000.3412            |
+---------------------------+
1 row in set (0.004 sec)



tampilkan tgl, kdbrg, jml, dan harga, harga ditampilkan dalam bentuk RP.XXX.XXX.XXX dengan pembulatan dua angka dibelakang koma, Contoh Rp.1.250.000,00

	SELECT tgl, kdbrg, jml, CONCAT('Rp.',' ',FORMAT(hrg,2)) Harga FROM ttrans;
 
 SELECT tgl, kdbrg, jml, CONCAT('Rp.',' ',FORMAT(hrg,2)) Harga
    -> FROM ttrans;
+------------+-------+------+----------------+
| tgl        | kdbrg | jml  | Harga          |
+------------+-------+------+----------------+
| 2008-09-01 | B001  |    5 | Rp. 750,000.00 |
| 2008-09-01 | B002  |    5 | Rp. 175,000.00 |
| 2008-09-01 | B002  |    5 | Rp. 175,000.00 |
| 2008-09-01 | B003  |   20 | Rp. 25,000.00  |
| 2008-09-01 | B002  |   15 | Rp. 175,000.00 |
| 2008-09-01 | B005  |   10 | Rp. 50,000.00  |
| 2008-09-02 | B004  |   10 | Rp. 220,000.00 |
| 2008-09-02 | B001  |   20 | Rp. 750,000.00 |
| 2008-09-02 | B002  |   20 | Rp. 175,000.00 |
| 2008-09-03 | B002  |   30 | Rp. 225,000.00 |
| 2008-09-03 | B005  |   30 | Rp. 50,000.00  |
| 2008-10-01 | B001  |   10 | Rp. 750,000.00 |
| 2008-10-10 | B001  |    5 | Rp. 175,000.00 |
| 2007-01-10 | B001  |    5 | Rp. 750,000.00 |
| 2007-01-10 | B002  |    1 | Rp. 175,000.00 |
| 2007-01-10 | B003  |    3 | Rp. 25,000.00  |
| 2006-02-06 | B001  |   12 | Rp. 750,000.00 |
| 2005-03-01 | B001  |   10 | Rp. 750,000.00 |
| 2005-03-01 | B004  |   15 | Rp. 220,000.00 |
| 2006-05-31 | B001  |   40 | Rp. 750,000.00 |
+------------+-------+------+----------------+
20 rows in set (0.000 sec)

===============================================================

E. SUBSTRING() atau SUBSTR()
.........digunakan untuk mengambil sebagian string/ memotong string membutuhkan 2 atau 3 argumen

Argumen 1 ===> String sumber
Argumen 2 ===> posisi awal pengambilan / pemotongan
Argumen 3 ===> opsional dan sebagai batasan string yang akan diambil

	Contoh;
	SELECT SUBSTRING('Teknik Komputer',4);

 SELECT SUBSTRING('Teknik Komputer',4);
+--------------------------------+
| SUBSTRING('Teknik Komputer',4) |
+--------------------------------+
| nik Komputer                   |
+--------------------------------+
1 row in set (0.001 sec)


	SELECT SUBSTRING('Teknik Komputer',4,3);

SELECT SUBSTRING('Teknik Komputer',4,3);
+----------------------------------+
| SUBSTRING('Teknik Komputer',4,3) |
+----------------------------------+
| nik                              |
+----------------------------------+
1 row in set (0.008 sec)


	SELECT SUBSTRING('Teknik Komputer',4,6);

SELECT SUBSTRING('Teknik Komputer',4,6);
+----------------------------------+
| SUBSTRING('Teknik Komputer',4,6) |
+----------------------------------+
| nik Ko                           |
+----------------------------------+
1 row in set (0.000 sec)


Tampilkan nama barang dari karakter ke 5 hingga 10. dari tabel barang.


SELECT SUBSTRING(nmbrg,5,10) AS NamaBarang FROM  tbrg;
+------------+
| NamaBarang |
+------------+
| uter Penti |
| book ASUS  |
| et         |
| isk Ext WD |
| disk Kings |
| tor Samsun |
| e Wireless |
+------------+
7 rows in set (0.000 sec)

=====================================================

F. LEFT() dan RIGHT()
.....digunakan untuk mengambil sebagian string dari posisi kiri (LEFT) dan kanan(RIGHT). membutuhkan 2 argumen

	Contoh
	SELECT LEFT('Teknik Komputer',5);

 SELECT LEFT('Teknik Komputer',5);
+---------------------------+
| LEFT('Teknik Komputer',5) |
+---------------------------+
| Tekni                     |
+---------------------------+
1 row in set (0.001 sec)


	SELECT RIGHT('Teknik Komputer',5);

SELECT RIGHT('Teknik Komputer',5);
+----------------------------+
| RIGHT('Teknik Komputer',5) |
+----------------------------+
| puter                      |
+----------------------------+
1 row in set (0.000 sec)


CONTOH1
Tampilkan nama barang yang 2 karakter pertama adalah 'MO' 

 SELECT nmbrg AS NamaBarang FROM tbrg
    -> WHERE LEFT(nmbrg,2) = 'Mo';
+-------------------------+
| NamaBarang              |
+-------------------------+
| Monitor Samsung 15 Inch |
| Mouse Wireless Logitech |
+-------------------------+
2 rows in set (0.001 sec)

SELECT nmbrg AS NamaBarang FROM tbrg
    -> WHERE nmbrg LIKE 'Mo%';
+-------------------------+
| NamaBarang              |
+-------------------------+
| Monitor Samsung 15 Inch |
| Mouse Wireless Logitech |
+-------------------------+
2 rows in set (0.000 sec)


CONTOH 2:
tampilkan 10 data pada tabel payments untuk amount yang jumlahnya maksimal adalah 50.000. urutkan berdasarkan amount tertinggi. tampilkan juga field lain dengan ketentuan:
	customernumber hanya 2 karakter diawal saja
	chechnumber hanya 4 karakter diakgir saja
	paymendate hanya nomor bulannya saja yang ditampilkan.
	format tampilan amount tidak ada angka dibelakang koma

 select LEFT(customerNumber,2), RIGHT(checkNumber,4), SUBSTRING(paymentDate,6,2), FORMAT(amount,0)
    -> FROM payments
    -> WHERE amount <= 50000
    -> ORDER BY amount DESC limit 10;
+------------------------+----------------------+----------------------------+------------------+
| LEFT(customerNumber,2) | RIGHT(checkNumber,4) | SUBSTRING(paymentDate,6,2) | FORMAT(amount,0) |
+------------------------+----------------------+----------------------------+------------------+
| 35                     | 1193                 | 01                         | 49,706           |
| 14                     | 3410                 | 01                         | 49,615           |
| 14                     | 5280                 | 10                         | 49,539           |
| 11                     | 4694                 | 02                         | 49,524           |
| 40                     | 7687                 | 01                         | 49,165           |
| 39                     | 4275                 | 11                         | 48,928           |
| 44                     | 2727                 | 09                         | 48,810           |
| 18                     | 4726                 | 03                         | 48,426           |
| 46                     | 6846                 | 11                         | 48,356           |
| 24                     | 4084                 | 09                         | 48,299           |
+------------------------+----------------------+----------------------------+------------------+
10 rows in set (0.001 sec)


=========================================================================================

3. FUNGSI DATE / TIME
.......digunakan untuk mengolah data bertipe dta/time

JENIS
A. CURRENT_TIMESTAMP(), LOCALTIME(),LOCALTIMESTAMP(), NOW()
......untuk menampilkan watu saaat ini (real time) / sesuai dengan waktu dikomputer server.

	Contoh ;
	SELECT CURRENT_TIMESTAMP();
	SELECT LOCALTIME();
	SELECT LOCALTIMESTAMP();
	SELECT NOW();

SELECT CURRENT_TIMESTAMP();
+---------------------+
| CURRENT_TIMESTAMP() |
+---------------------+
| 2021-11-17 09:45:11 |
+---------------------+
1 row in set (0.000 sec)

SELECT LOCALTIME();
+---------------------+
| LOCALTIME()         |
+---------------------+
| 2021-11-17 09:45:22 |
+---------------------+
1 row in set (0.000 sec)

SELECT LOCALTIMESTAMP();
+---------------------+
| LOCALTIMESTAMP()    |
+---------------------+
| 2021-11-17 09:45:28 |
+---------------------+
1 row in set (0.000 sec)

SELECT NOW();
+---------------------+
| NOW()               |
+---------------------+
| 2021-11-17 09:45:34 |
+---------------------+
1 row in set (0.000 sec)


=====================================

B. DATE() dan TIME()
.........untuk menampilkan bagian tanggal/waktu dari input date/time. dengan argumen berupa nilai tanggal/field dengan tipe date/time.

	CONTOH:
	SELECT DATE('2020-10-01 10:10:34');
	SELECT TIME('2020-10-01 10:10:34');

SELECT DATE('2020-10-01 10:10:34');
+-----------------------------+
| DATE('2020-10-01 10:10:34') |
+-----------------------------+
| 2020-10-01                  |
+-----------------------------+
1 row in set (0.004 sec)

SELECT TIME('2020-10-01 10:10:34');
+-----------------------------+
| TIME('2020-10-01 10:10:34') |
+-----------------------------+
| 10:10:34                    |
+-----------------------------+
1 row in set (0.000 sec)


CONTOH
tampilkan tanggal hari ini.

 SELECT DATE(NOW());
+-------------+
| DATE(NOW()) |
+-------------+
| 2021-11-17  |
+-------------+
1 row in set (0.000 sec)

tampilkan waktu hari ini

 SELECT TIME(NOW());
+-------------+
| TIME(NOW()) |
+-------------+
| 09:52:22    |
+-------------+
1 row in set (0.000 sec)

==================================================

C. CURDATE() atau CURRENT_DATE()
........menampilkan tanggal real/saat ini = date(NOW())

	SELECT CURDATE();


==============================
D. CURTIME() atau CURRENT_TIME()
.......menampilkan waktu saat ini/real ini = TIME(NOW())

	SELECT CURTIME();


E. MONTH() dan YEAR()
.....menapilkan bulan dan tahun. bisa diikuti oleh fungsi lain dan bisa diikuti oleh nilai tanggal/field yang bertipe date.

contoh

 SELECT YEAR(NOW());
+-------------+
| YEAR(NOW()) |
+-------------+
|        2021 |
+-------------+
1 row in set (0.001 sec)

SELECT MONTH(NOW());
+--------------+
| MONTH(NOW()) |
+--------------+
|           11 |
+--------------+
1 row in set (0.003 sec)

==========================================================

tampilkan ordernumber, orderdate, status untuk order yang terjadi pada bulan september 2003.

MariaDB [classicmodels]> Select orderNumber, orderDate, status FROM orders
    -> Where MONTH(orderDate) = 9 AND YEAR(orderDate) = 2003;
+-------------+------------+---------+
| orderNumber | orderDate  | status  |
+-------------+------------+---------+
|       10146 | 2003-09-03 | Shipped |
|       10147 | 2003-09-05 | Shipped |
|       10148 | 2003-09-11 | Shipped |
|       10149 | 2003-09-12 | Shipped |
|       10150 | 2003-09-19 | Shipped |
|       10151 | 2003-09-21 | Shipped |
|       10152 | 2003-09-25 | Shipped |
|       10153 | 2003-09-28 | Shipped |
+-------------+------------+---------+
8 rows in set (0.013 sec)

==========================================================================================

F.MONTHNMAE() dan DAYNAME()
............menampilkan nama dan bulan nama hari dari sebuah tanggal.

SELECT MONTHNAME(NOW());

tampilkan ordernumber, orderdate, status untuk order yang terjadi pada bulan september 2003.
MariaDB [classicmodels]> Select orderNumber, orderDate, status FROM orders
    -> Where MONTHNAME(orderDate) = 'September' AND YEAR(orderDate) = 2003;
+-------------+------------+---------+
| orderNumber | orderDate  | status  |
+-------------+------------+---------+
|       10146 | 2003-09-03 | Shipped |
|       10147 | 2003-09-05 | Shipped |
|       10148 | 2003-09-11 | Shipped |
|       10149 | 2003-09-12 | Shipped |
|       10150 | 2003-09-19 | Shipped |
|       10151 | 2003-09-21 | Shipped |
|       10152 | 2003-09-25 | Shipped |
|       10153 | 2003-09-28 | Shipped |
+-------------+------------+---------+
8 rows in set (0.001 sec)

===================================================
G. ADDDATE() atau DATE_ADD()
.......menampilkan hasil penambahan tanggal dan waktu

	Struktur:
	ADDDATE(DATE, INTERVAL jumlah_penambahan);
	DATE_ADD(DATE, INTERVAL jumlah_penambahan);

	NB: jumlah_penambahan => n day, nmont, nyear, n hour, n minute, n second.
	hour, minute, second => format yang ditambahkan harus lengkap

	CONTOH:
	SELECT ADDDATE('2021-11-20', INTERVAL 15 DAY);

SELECT ADDDATE('2021-11-20', INTERVAL 15 DAY);
+----------------------------------------+
| ADDDATE('2021-11-20', INTERVAL 15 DAY) |
+----------------------------------------+
| 2021-12-05                             |
+----------------------------------------+
1 row in set (0.004 sec)

==============================================

TAmpilkan 5 bulan dari tanggal sekarang.

SELECT ADDDATE(NOW(), INTERVAL 5 MONTH);
+----------------------------------+
| ADDDATE(NOW(), INTERVAL 5 MONTH) |
+----------------------------------+
| 2022-04-17 10:15:55              |
+----------------------------------+
1 row in set (0.000 sec)

TAmpilkan 2 tahun dari tanggal sekarang.

 SELECT ADDDATE(NOW(), INTERVAL 2 YEAR);
+---------------------------------+
| ADDDATE(NOW(), INTERVAL 2 YEAR) |
+---------------------------------+
| 2023-11-17 10:16:43             |
+---------------------------------+
1 row in set (0.000 sec)

Tanggal berapakah 45 hari setelah hari ini
SELECT ADDDATE(NOW(), INTERVAL 45 DAY);
+---------------------------------+
| ADDDATE(NOW(), INTERVAL 45 DAY) |
+---------------------------------+
| 2022-01-01 10:18:08             |
+---------------------------------+
1 row in set (0.000 sec)


2 jam dari seakarang adalah jam
 SELECT ADDDATE(NOW(), INTERVAL 2 HOUR);
+---------------------------------+
| ADDDATE(NOW(), INTERVAL 2 HOUR) |
+---------------------------------+
| 2021-11-17 12:17:40             |
+---------------------------------+
1 row in set (0.000 sec)

SOAL 2
jatuh tempo pembayaran dari tanggal order adalah 1 minggu setelah orderdate. Tampilkan tanggal order, tanggal pembayaran untuk order yang terjadi pada bulan november 2004.



===========================================================================

H. SUBDATE() atau DATE_SUB()
....digunakan untuk proses pengurangan tanggal dan waktu

SUBDATE(DATE, INTERVAL jumlah_penambahan);
DATE_SUB(DATE, INTERVAL jumlah_penambahan);

SELECT SUBDATE(NOW(), INTERVAL 15 DAY);
SELECT SUBDATE(NOW(), INTERVAL 5 MONTH);
SELECT SUBDATE(NOW(), INTERVAL 2 YEAR);
SELECT SUBDATE(NOW(), INTERVAL 54 MINUTE);

SELECT SUBDATE(NOW(), INTERVAL 15 DAY);
+---------------------------------+
| SUBDATE(NOW(), INTERVAL 15 DAY) |
+---------------------------------+
| 2021-11-02 10:35:52             |
+---------------------------------+
1 row in set (0.001 sec)

SELECT SUBDATE(NOW(), INTERVAL 5 MONTH);
+----------------------------------+
| SUBDATE(NOW(), INTERVAL 5 MONTH) |
+----------------------------------+
| 2021-06-17 10:36:27              |
+----------------------------------+
1 row in set (0.000 sec)

SELECT SUBDATE(NOW(), INTERVAL 2 YEAR);
+---------------------------------+
| SUBDATE(NOW(), INTERVAL 2 YEAR) |
+---------------------------------+
| 2019-11-17 10:36:32             |
+---------------------------------+
1 row in set (0.000 sec)


SELECT SUBDATE(NOW(), INTERVAL 54 MINUTE);
+------------------------------------+
| SUBDATE(NOW(), INTERVAL 54 MINUTE) |
+------------------------------------+
| 2021-11-17 09:42:41                |
+------------------------------------+
1 row in set (0.000 sec)


=========================================================================================

I. DATEDIFF()
..........digunakan untuk mengjitung selisih 2 buah tanggal.
Argumen 1 ==>Tanggal akhir
Argumen 2 ==>Tanggal Awal

SELECT DATEDIFF('2021-12-17', '2021-11-17') AS lama;
+------+
| lama |
+------+
|   30 |
+------+
1 row in set (0.004 sec)

==================================================================================


J. DATEFORMAT() jshett hal 143
....digunakan untuk memformat tampilan tanggal
CONTOH
 SELECT DATE_FORMAT('2021-11-15','%d-%M-%Y');
+--------------------------------------+
| DATE_FORMAT('2021-11-15','%d-%M-%Y') |
+--------------------------------------+
| 15-November-2021                     |
+--------------------------------------+
1 row in set (0.001 sec)



Tugas.
1. Kerjakan langkah jobsheet bab 16
2. SOAL2:

dbperkuliahan:
1. hitunglah usi dosen pada tabel tdosen, tampilkan juga nmaa dan tanggal lahir.
2. tampilkan nama, tgl_lahir dan hari kelahiran mahasiswa

dbjual:
3.Tanggal jatuh tempo pembayaran adalah 30 hari setelah transakasi. tampilkan semua data transakasi dan data jatuh tempo pembayaran untuk yang jatuh temponya pada bula februi saja.

Classicmodels:
4.	Tampilkan waktu tunggu yang dibutuhkan dari waktu pengiriman hingga pemesanan dari tabel order. untuk barang yang diorder pada bulan februari 2003. Tampilkan juga orderdate dan shippedadate nya dalam bentuk format nama hari, nama bulan dan tahun. Contoh: Monday, February 2003.

SELECT (shippedDate - orderDate) AS 'Waktu Tunggu',
CONCAT(DAYNAME(orderdate),',',MONTNAME(orderDAte),' ',YEAR(orderdate)) As 'OrderDAte',
CONCAT(DAYNAME(shippedDAte),',',MONTNAME(shippedDAte),' ',YEAR(shippedDAte)) As 'shippedDAte'
FROM orders
WHERE MONTH (orderdate) = 2 AND YEAR(ordedate0 = 2003;


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


CONTROL FLOW FUNCTION
---------------------
--> Jika.... Maka....
Ada pemilihan didalam MySQL

Ada 4 jenis :
1. IF
2. CASE
3. IFNULL
4. NULLIF

A. FUNGSI IF
------------
Format :

IF(kondisi_logika, ekspresi1, ekspresi2);

Kondisi_logika --> kondisi yang akan dilakukan pengujian, bisa berupa nilai yang ada didalam sebuah tabel, kondisi ini bisa dinilai TRUE atau FALSE.

ekspresi1 --> aksi yang akan dilakukan jika kondisi TRUE
ekspresi2 --> aksi yang akan dilakukan jika kondisi FALSE

Contoh :
SELECT IF(1=2, 0, 1);
SELECT IF(1<2, 1, 0);

Contoh pada database dbjual :
1. Jika ongkos kirim seorang pelanggan dikategorikan berdasarkan jarak lokasi tempat tinggal dengan toko yang berada di Padang. Jika pelanggan berada di Padang maka bebas ongkos kirim. Namun jika diluar Padang akan dikenai ongkos kirim. Tampilkan seluruh data pelanggan beserta keterangan apakah bebas ongkos kirim atau tidak.

kondisi_logika --> kota=Padang ??
Ekspresi1 --> Jika TRUE --> Bebas Ongkir
Ekspresi2 --> Jika FALSE --> Dikenai Ongkir

SELECT * , IF(kota='Padang','Bebas Ongkir','Dikenai Ongkir') AS keterangan
FROM tpelanggan;

2. Tampilkan nonota, tgl, kdbrg, jml, hrg, total_hrg(jml*hrg) dan kuota transaksi. Dengan ketentuan : tulis kuota 1 jika jumlah minimal barang adalah 15 dan selebihnya tulis kuota 2.

SELECT --> nonota, tgl, kdbrg, jml, hrg, jml*hrg AS total_hrg, kuota transaksi (IF)
kondisi_logia --> jumlah barang minimal 15 ?
ekspresi1 --> Jika TRUE --> Kuota 1
ekspresi2 --> Jika FALSE --> kuota 2

Fungsi IF untuk banyak kondisi (multi kasus)
============================================

Format :

IF (kondisi_logika1, ekspresi1, IF(kondisi_logika2, ekspresi2, IF(kondisi_logika3, ekspresi3, ekspresi4)))

4 kemungkinan kondisi_logika --> ada 3 IF
ekspresi1 --> dilakukan jika kondisi_logika1 bernilai TRUE
ekspresi2 --> dilakukan jika kondisi_logika1 bernilai FALSE dan kondisi_logika2 bernilai                TRUE
ekspresi3 --> dilakukan jika kondisi_logika1, kondisi_logika2 bernilai FALSE dan               kondisi_logika3 bernilai TRUE
ekspresi4 --> dilakukan jika kondisi_logika1, 2 dan 3 bernilai FALSE dan kondisi_logika4               bernilai TRUE

Contoh :
1. Tampilkan semua data transaksi, dan kuota transaksi dengan ketentuan, jika jumlah barang maksimum 5 maka dikategorikan sebagai partai kecil. Jika jumlah barang 6-10 maka dikategorikan sebagai partai menengah. Dan jika jumlah barang lebih dari 10, maka dikategorikan sebagai partai besar.

kondisi_logika1 --> jml <= 5
kondisi_logika2 --> jml >=6 and jml<=10

ekspresi1 --> Jika TRUE --> Partai Kecil
ekspresi2 --> Jika FALSE --> Partai Menengah
ekspresi3 --> Jika FALSE --> Partai Besar

Cara1:

SELECT *, IF(jml<=5,'Partai Kecil',IF(jml>=6 AND jml<=10,'Partai Menengah',
          'Partai Besar')) AS kuota_transaksi
FROM ttrans;

Cara2:
SELECT *, IF(jml<=5,'Partai Kecil',IF(jml<=10,'Partai Menengah',
          'Partai Besar')) AS kuota_transaksi
FROM ttrans;

2. Toko memberikan aturan diskon bertingkat dengan ketentuan sbb:
- Jika jumlah barang dibawah 10, diskon 5%
- Jika jumlah barang 10 - 20, diskon 10%
- Jika jumlah diatas 20, diskon 20%

Diskon diberikan dari total harga keseluruhan.
Tampilkan tanggal transaksi, kode pelanggan, jml, hrg, total(jml*hrg), besaran diskon, total bayar setelah dikurangi diskon. 
Urutkan dari transaksi dengan pembayaran tertinggi.

3. Buat query yang menampilkan data ambil(db perkuliahan) kemudian terjemahkan nilai huruf sbb:
  A=4, B=3, C=2, D=1, E=0

4. tampilkan data t_kuliah, tambahkan kolom keterangan semester yang berisikan ganjil atau genap.

5. Dari database classicmodels, tampilkan 15 full name kontak customers yang tinggal di USA berupa huruf kapital (gabungan firstname dan lastname), city dan state customers dan penjelasan dari state dengan ketentuan :
           NV = Nevada
           CA = California
           NY = New York
Selain ketiga state itu berikan keterangan 'others'. Urutkan berdasarkan full name

CONTROL FLOW FUNCTION
	1.IF
	2.CASE
	3.IFNULL
	4.NULLIF

cONTROL FLOW FUNCTION

A. IF
	-2 kemungkinanan kondisi
		IF (kondisi, statejikakondisibenar, statejikakondisisalah)
	-n kemungkinan
		IF(kondisis, aksi1(IF(kon2,aksi2,IF(kond3,kond4))))

CONTOH:
Soal 1.
Classicmodels
	Tampilkan 25 namaproduk, jenis produk serta penjelasan dengan ketentuan:
	Productline classsic cars -- mobil klasik
	trains -- kereta
	ships -- kapal
	planes-- pesawat
	selebihnya : kendaraan lainnya

SELECT productName AS 'Nama Produk', productLine AS 'Jenis Produk',
    -> IF(productLine='classic cars','mobil klasik',
    -> IF(productLine='ships','kapal',
    -> IF(productLine='trains','kereta',
    -> IF(productLine='planes','pesawat','kendaraan lainnya')))) AS Penjelasan
    -> FROM products
    -> LIMIT 25;
=======================================
B. Struktur CASE
	=> bentuk lain dari IF

Struktur 1;
	CASE variabel_kondisi/nilai
	WHEN nilai THEN statement1
	WHEn nilai2 THEN statement2
	ELSE
	   statements_else
	END

Struktur 2; (lebih global)
	CASE 
	WHEN nilai THEN statement1
	WHEn nilai2 THEN statement2
	ELSE
	   statements_else
	END

CONTOH
=============Keterangan====================
	A= 'Bagus Sekali'
	B= 'Bagus'
	C= 'Cukup'
	D= 'Kurang'
	E= 'Gagal'

================JAWAB==================
	CASE nilai
	WHEN 'A' THEN 'Bagus Sekali'
	................
	WHEN 'D' THEN 'Kurang'
	ELSE
	  'Gagal'
	END

============Keterangan Suhu===========
	T < 0 = ES
	0-100 = Cair
	>100 = GAS

===================JAWAB==================
	CASE
	WHEN suhu<0 THEN ES
	....................
	ELSE
	   GAS
	END

CONTOH:
SOAL CASE:
SOAL 2
Tampilkan 25 namaproduk, jenis produk serta penjelasan dengan ketentuan:
	Productline classsic cars -- mobil klasik
	trains -- kereta
	ships -- kapal
	planes-- pesawat
	selebihnya : kendaraan lainnya

Struktur 1:
SELECT productName AS ' Nama Produk', productLine AS 'Jenis Produk',
    -> CASE productLine
    -> WHEN productLine='classic cars' THEN 'Mobil Klasik'
    -> WHEN productLine='ships' THEN 'Kapal'
    -> WHEN productLine='trains' THEN 'Kereta'
    -> WHEN productLine='planes' THEN 'Pesawat'
    -> ELSE 'Kendaraan Lainnya'
    -> END AS 'Penjelasan'
    -> FROM products
    -> LIMIT 25;
+------------------------------------------+------------------+--------------+
| Nama Produk                              | Jenis Produk     | Penjelasan   |
+------------------------------------------+------------------+--------------+
| 1969 Harley Davidson Ultimate Chopper    | Motorcycles      | Mobil Klasik |
| 1952 Alpine Renault 1300                 | Classic Cars     | Kapal        |
| 1996 Moto Guzzi 1100i                    | Motorcycles      | Mobil Klasik |
| 2003 Harley-Davidson Eagle Drag Bike     | Motorcycles      | Mobil Klasik |
| 1972 Alfa Romeo GTA                      | Classic Cars     | Kapal        |
| 1962 LanciaA Delta 16V                   | Classic Cars     | Kapal        |
| 1968 Ford Mustang                        | Classic Cars     | Kapal        |
| 2001 Ferrari Enzo                        | Classic Cars     | Kapal        |
| 1958 Setra Bus                           | Trucks and Buses | Mobil Klasik |
| 2002 Suzuki XREO                         | Motorcycles      | Mobil Klasik |
| 1969 Corvair Monza                       | Classic Cars     | Kapal        |
| 1968 Dodge Charger                       | Classic Cars     | Kapal        |
| 1969 Ford Falcon                         | Classic Cars     | Kapal        |
| 1970 Plymouth Hemi Cuda                  | Classic Cars     | Kapal        |
| 1957 Chevy Pickup                        | Trucks and Buses | Mobil Klasik |
| 1969 Dodge Charger                       | Classic Cars     | Kapal        |
| 1940 Ford Pickup Truck                   | Trucks and Buses | Mobil Klasik |
| 1993 Mazda RX-7                          | Classic Cars     | Kapal        |
| 1937 Lincoln Berline                     | Vintage Cars     | Mobil Klasik |
| 1936 Mercedes-Benz 500K Special Roadster | Vintage Cars     | Mobil Klasik |
| 1965 Aston Martin DB5                    | Classic Cars     | Kapal        |
| 1980s Black Hawk Helicopter              | Planes           | Mobil Klasik |
| 1917 Grand Touring Sedan                 | Vintage Cars     | Mobil Klasik |
| 1948 Porsche 356-A Roadster              | Classic Cars     | Kapal        |
| 1995 Honda Civic                         | Classic Cars     | Kapal        |
+------------------------------------------+------------------+--------------+
25 rows in set, 26 warnings (0.001 sec)

Struktur 2:
SELECT productName AS ' Nama Produk', productLine AS 'Jenis Produk',
    -> CASE
    -> WHEN productLine='classic cars' THEN 'Mobil Klasik'
    -> WHEN productLine='ships' THEN 'Kapal'
    -> WHEN productLine='trains' THEN 'Kereta'
    -> WHEN productLine='planes' THEN 'Pesawat'
    -> ELSE 'Kendaraan Lainnya'
    -> END AS 'Penjelasan'
    -> FROM products
    -> LIMIT 25;

+------------------------------------------+------------------+-------------------+
| Nama Produk                              | Jenis Produk     | Penjelasan        |
+------------------------------------------+------------------+-------------------+
| 1969 Harley Davidson Ultimate Chopper    | Motorcycles      | Kendaraan Lainnya |
| 1952 Alpine Renault 1300                 | Classic Cars     | Mobil Klasik      |
| 1996 Moto Guzzi 1100i                    | Motorcycles      | Kendaraan Lainnya |
| 2003 Harley-Davidson Eagle Drag Bike     | Motorcycles      | Kendaraan Lainnya |
| 1972 Alfa Romeo GTA                      | Classic Cars     | Mobil Klasik      |
| 1962 LanciaA Delta 16V                   | Classic Cars     | Mobil Klasik      |
| 1968 Ford Mustang                        | Classic Cars     | Mobil Klasik      |
| 2001 Ferrari Enzo                        | Classic Cars     | Mobil Klasik      |
| 1958 Setra Bus                           | Trucks and Buses | Kendaraan Lainnya |
| 2002 Suzuki XREO                         | Motorcycles      | Kendaraan Lainnya |
| 1969 Corvair Monza                       | Classic Cars     | Mobil Klasik      |
| 1968 Dodge Charger                       | Classic Cars     | Mobil Klasik      |
| 1969 Ford Falcon                         | Classic Cars     | Mobil Klasik      |
| 1970 Plymouth Hemi Cuda                  | Classic Cars     | Mobil Klasik      |
| 1957 Chevy Pickup                        | Trucks and Buses | Kendaraan Lainnya |
| 1969 Dodge Charger                       | Classic Cars     | Mobil Klasik      |
| 1940 Ford Pickup Truck                   | Trucks and Buses | Kendaraan Lainnya |
| 1993 Mazda RX-7                          | Classic Cars     | Mobil Klasik      |
| 1937 Lincoln Berline                     | Vintage Cars     | Kendaraan Lainnya |
| 1936 Mercedes-Benz 500K Special Roadster | Vintage Cars     | Kendaraan Lainnya |
| 1965 Aston Martin DB5                    | Classic Cars     | Mobil Klasik      |
| 1980s Black Hawk Helicopter              | Planes           | Pesawat           |
| 1917 Grand Touring Sedan                 | Vintage Cars     | Kendaraan Lainnya |
| 1948 Porsche 356-A Roadster              | Classic Cars     | Mobil Klasik      |
| 1995 Honda Civic                         | Classic Cars     | Mobil Klasik      |
+------------------------------------------+------------------+-------------------+
25 rows in set, 1 warning (0.001 sec)

SOAL 2
Tampilkan seluruh data orderdetails dengan yang harga satuan minimal 200 dengan urutan field
	nomor order(orderNumber), 
	kode produk(productCode), 
	banyak order(quantityordered), 
	ket_order, 
	harga(priceEach)
	
	dimana ket_order diperolah dari quantityordered dengan ketentuan
		quantityordered <25 : small order
				25-40 : medium order
				>40 	; large order
	urutkan berdasarkan quantityordered tertinggi


Struktur 2:

SELECT orderNumber AS 'Nomor Order',productCode AS ' Kode Produk',
    -> quantityOrdered AS 'Banyak Order',
    -> CASE
    -> WHEN quantityOrdered <25 THEN 'Small Order'
    -> WHEN quantityOrdered <=40 THEN 'Medium Order'
    -> ELSE 'Large Order'
    -> END AS 'Ket_order',
    -> priceEach AS 'Harga'
    -> FROM orderDetails
    -> WHERE priceEach >=200
    -> ORDER by quantityOrdered DESC, priceEach DESC;

+-------------+-------------+--------------+--------------+--------+
| Nomor Order | Kode Produk | Banyak Order | Ket_order    | Harga  |
+-------------+-------------+--------------+--------------+--------+
|       10424 | S10_1949    |           50 | Large Order  | 201.44 |
|       10312 | S10_1949    |           48 | Large Order  | 214.30 |
|       10348 | S12_1108    |           48 | Large Order  | 207.80 |
|       10196 | S12_1108    |           47 | Large Order  | 203.64 |
|       10206 | S10_1949    |           47 | Large Order  | 203.59 |
|       10304 | S10_1949    |           47 | Large Order  | 201.44 |
|       10194 | S10_1949    |           42 | Large Order  | 203.59 |
|       10105 | S12_1108    |           41 | Large Order  | 205.72 |
|       10126 | S10_1949    |           38 | Medium Order | 205.73 |
|       10291 | S10_1949    |           37 | Medium Order | 210.01 |
|       10413 | S12_1108    |           36 | Medium Order | 201.57 |
|       10215 | S10_1949    |           35 | Medium Order | 205.73 |
|       10174 | S10_1949    |           34 | Medium Order | 207.87 |
|       10280 | S10_1949    |           34 | Medium Order | 205.73 |
|       10395 | S12_1108    |           33 | Medium Order | 205.72 |
|       10228 | S10_1949    |           29 | Medium Order | 214.30 |
|       10103 | S10_1949    |           26 | Medium Order | 214.30 |
|       10411 | S10_1949    |           23 | Small Order  | 205.73 |
|       10163 | S10_1949    |           21 | Small Order  | 212.16 |
|       10153 | S12_1108    |           20 | Small Order  | 201.57 |
+-------------+-------------+--------------+--------------+--------+
20 rows in set, 1 warning (0.003 sec)


C. IFNULL
====>> Struktur control kondisi khusus untuk mengatasi nilai NULL

Struktur:
	IFNULL(statements1, statements2)
Keterangan:
	#Struktur akan melakukan pengecekan terhadap statement 1(bisa berupa field atau 	ekspresi)
	#jika statement 1 nilainya tidak NULL --> maka struktur akan menampilkan nilai statement 1
	#jika statement1 nilainya NULL --> maka struktur akan menampilkan nilai statement 2

STRUKTUR sama dengan:
	IF(statement IS NULL, statements2, statement1)

===================================
inputkan data pelanggan
	kdlgn		nmlgn
	P020		Anwar
	P021		Raffi

INSERT INTO tpelanggan values (kdlgn, nmlgn) VALUES
('P020','Anwar'),
('P021','Raffi');

INSERT INTO tpelanggan (kdlgn, nmlgn, kota) VALUES
('P022','Citra','Padang');

============================================
SOAL1:
	Tampilkan data pelanggan terdiri dari  kode, nama, dan alamat. Jika alamat masih kosong, isikan dengan kalimat "Data Belum Ada"

 SELECT kdlgn, nmlgn, IFNULL(almlgn,'Data Belum Ada') AS 'Alamat'
    -> FROM tpelanggan;

+-------+--------------+-----------------+
| kdlgn | nmlgn        | Alamat          |
+-------+--------------+-----------------+
| P001  | Galaxy Media | Birugo          |
| P002  | Gamatechno   | Anduring        |
| P003  | Citra Mozaic | Jl. Veteran     |
| P004  | JJ ENT       | Khatib Sulaiman |
| P005  | Green Media  | Jambu Air       |
| P006  | Tk. Intan    | Jl.S.Hatta      |
| P007  | Onexindo     | Pauh            |
| P010  | Rudi         | Data Belum Ada  |
| P015  | Citra        | Data Belum Ada  |
| P020  | Anwar        | Data Belum Ada  |
| P021  | Raffi        | Data Belum Ada  |
| P022  | Citra        | Data Belum Ada  |
+-------+--------------+-----------------+
12 rows in set (0.001 sec)

SOAL2:

Tampilkan data pelanggan yang tidak memiliki kota terdiri dari kode, nama, dan alamat(jika alamat kosong, tampilkan data kota sebagai alamat)

SELECT kdlgn,nmlgn, IFNULL(almlgn,kota) AS Alamat
    -> FROM tpelanggan
    -> WHERE kota IS NOT NULL;

+-------+--------------+-----------------+
| kdlgn | nmlgn        | Alamat          |
+-------+--------------+-----------------+
| P001  | Galaxy Media | Birugo          |
| P002  | Gamatechno   | Anduring        |
| P003  | Citra Mozaic | Jl. Veteran     |
| P004  | JJ ENT       | Khatib Sulaiman |
| P005  | Green Media  | Jambu Air       |
| P006  | Tk. Intan    | Jl.S.Hatta      |
| P007  | Onexindo     | Pauh            |
| P010  | Rudi         | Solok           |
| P015  | Citra        | Padang          |
| P022  | Citra        | Padang          |
+-------+--------------+-----------------+
10 rows in set (0.001 sec)


SOAL 3:
Tampilkan 20 data customer yang terdiri dari namalengkap(gabungan contactFirstname dan contactLastname), alamat (diambil dari addressline2, jika tidak ada baru addressline1). Urutkan berdasarkan nama lengkap
NB:fungsi CONCAT

SELECT CONCAT(contactFirstNAme,' ',contactlastNAme) 'Nama Lengkap',
IFNULL (addresLine2, addresLine1) 'alamat'
FROM customers
ORDER BY 'Nama Lengkap'
LIMIT 20;


SOAL4:
Tampilkan Country dan state pada tabel offices. untuk state yang memiliki nilai NULL, ganti dengan nilai country.tampilkan hanya state yang tidak memiliki data

SELECT country, IFNULL (state, country) 'state'
FROM offices
WHERE state IS NULL;

SOAL 5:
Tampilkan ordernumber, orderdate,requreddate, shippeddate dari tabel order. untuk shippeddate yang nilainya NULL ganti dengan 'belum terkirim'. tampilkan hanya untuk orderdate yang terjadi pada bulan mei 2005 saja.

SELECT orderNumber, orderDAte, requiredDate,
IFNULL (shippedDAte, 'Bellum Terkirim') 'shippedDate'
FROM orders
WHERE MONTH(orderDate)=5 AND YEAR(orderDAte) = 2005;



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


08 Desember 2021

CONTROL FLOW FUNCTION
	1.IF
	2.CASE
	3.IFNULL
	4.NULLIF

IFNULL(statement1,staement2)

statement =>> field/nilai/ekspresi
	      yang diuji adalah satatement1(apakah nilai NULL atau tidak)
statement1 NULL ==>>ditampilkan statement2
statement1 tidak NULL ==>> ditampilkan statemet1

CONTOH:
Tampilkan 10 data customer yang terdiri dari namalengkap(gabungan 
contactFirstname dan contactLastname), alamat (diambil dari addressline2, jika 
tidak ada baru addressline1). alamat tampilkan berupa gabungan alamat dan kota.

SELECT CONCAT(contactFirstName,' ',contactLastName) AS 'Name',
    -> CONCAT(IFNULL(addressline2,addressline1),',',city) AS 'Address'
    -> FROM customers
    -> LIMIT 10;
+--------------------------+-----------------------------------------+
| Name                     | Address                                 |
+--------------------------+-----------------------------------------+
| Carine  Schmitt          | 54, rue Royale,Nantes                   |
| Jean King                | 8489 Strong St.,Las Vegas               |
| Peter Ferguson           | Level 3,Melbourne                       |
| Janine  Labrune          | 67, rue des Cinquante Otages,Nantes     |
| Jonas  Bergulfsen        | Erling Skakkes gate 78,Stavern          |
| Susan Nelson             | 5677 Strong St.,San Rafael              |
| Zbyszek  Piestrzeniewicz | ul. Filtrowa 68,Warszawa                |
| Roland Keitel            | Lyonerstr. 34,Frankfurt                 |
| Julie Murphy             | 5557 North Pendale Street,San Francisco |
| Kwai Lee                 | 897 Long Airport Avenue,NYC             |
+--------------------------+-----------------------------------------+
10 rows in set (0.034 sec)


================================================================================

4.NULLIF
==>>NULLIF merupakan fungsi control yang juga menerima 2 statement
	
	NULLIF(statement1, statement2)

-untuk fungsi NULLIF yang diuji adalah kedua statement
-jika statement1 nilainya sama dengan statement2, maka akan ditampilkan nilai NULL
-jika terdapat perbedaan antara kedua statement, maka akan dikembalikan nilai statement1


PERCOBAAN:
	SELECT NULLIF(1,1)
	SELECT NULLIF(1,0)
	SELECT NULLIF(0,1)
	SELECT NULLIF('TI','TI')
	
 SELECT NULLIF(1,1);
+-------------+
| NULLIF(1,1) |
+-------------+
|        NULL |
+-------------+



 SELECT NULLIF(1,0);
+-------------+
| NULLIF(1,0) |
+-------------+
|           1 |
+-------------+



SELECT NULLIF(0,1);
+-------------+
| NULLIF(0,1) |
+-------------+
|           0 |
+-------------+


 SELECT NULLIF('TI','TI');
+-------------------+
| NULLIF('TI','TI') |
+-------------------+
| NULL              |
+-------------------+





CONTOH:

di dbjual tambahkan data
 kdlgn=P030	almlgn=Padang	kota=Padang

 insert into tpelanggan value (kdlgn, almlgn, kota)
    -> ('P030','Padang','Padang');

Cobakan query ini :
SELECT nmlgn, almlgn, kota, NULLIF(almlgn,kota) AS 'Keterangan'
FROM tpelanggan;
.......................
SELECT nmlgn, almlgn, kota, NULLIF(almlgn,kota) AS 'Keterangan'
    -> FROM tpelanggan;
+--------------+-----------------+----------------+-----------------+
| nmlgn        | almlgn          | kota           | Keterangan      |
+--------------+-----------------+----------------+-----------------+
| Galaxy Media | Birugo          | Bukittinggi    | Birugo          |
| Gamatechno   | Anduring        | Padang         | Anduring        |
| Citra Mozaic | Jl. Veteran     | Padang Panjang | Jl. Veteran     |
| JJ ENT       | Khatib Sulaiman | Padang         | Khatib Sulaiman |
| Green Media  | Jambu Air       | Bukittinggi    | Jambu Air       |
| Tk. Intan    | Jl.S.Hatta      | Bukittinggi    | Jl.S.Hatta      |
| Onexindo     | Pauh            | Padang         | Pauh            |
| Rudi         | NULL            | Solok          | NULL            |
| Citra        | NULL            | Padang         | NULL            |
| Anwar        | NULL            | NULL           | NULL            |
| Raffi        | NULL            | NULL           | NULL            |
| Citra        | NULL            | Padang         | NULL            |
| NULL         | Padang          | Padang         | NULL            |
+--------------+-----------------+----------------+-----------------+
13 rows in set (0.001 sec)


Penggabungan IFNULL  dengan NULLIF
CONTOH:
Tampilkan kdlgn,nmlgn,almlgn,kota, dan keterangan, dimana jika nama nilainya kosong beritahu untuk mengisi nama dan beritahu jika alamat dan kota nilainya sama.

SELECT kdlgn, IFNULL(nmlgn,'Nama Masih Kosong') AS 'Nama', almlgn, kota,
IFNULL(NULLIF(almlgn,kota),'Alamat sama dengan Kota') AS 'Keterangan'
FROM tpelanggan;

+-------+-------------------+-----------------+----------------+-------------------------+
| kdlgn | Nama              | almlgn          | kota           | Keterangan              |
+-------+-------------------+-----------------+----------------+-------------------------+
| P001  | Galaxy Media      | Birugo          | Bukittinggi    | Birugo                  |
| P002  | Gamatechno        | Anduring        | Padang         | Anduring                |
| P003  | Citra Mozaic      | Jl. Veteran     | Padang Panjang | Jl. Veteran             |
| P004  | JJ ENT            | Khatib Sulaiman | Padang         | Khatib Sulaiman         |
| P005  | Green Media       | Jambu Air       | Bukittinggi    | Jambu Air               |
| P006  | Tk. Intan         | Jl.S.Hatta      | Bukittinggi    | Jl.S.Hatta              |
| P007  | Onexindo          | Pauh            | Padang         | Pauh                    |
| P010  | Rudi              | NULL            | Solok          | Alamat sama dengan Kota |
| P015  | Citra             | NULL            | Padang         | Alamat sama dengan Kota |
| P020  | Anwar             | NULL            | NULL           | Alamat sama dengan Kota |
| P021  | Raffi             | NULL            | NULL           | Alamat sama dengan Kota |
| P022  | Citra             | NULL            | Padang         | Alamat sama dengan Kota |
| P030  | Nama Masih Kosong | Padang          | Padang         | Alamat sama dengan Kota |
+-------+-------------------+-----------------+----------------+-------------------------+
13 rows in set (0.001 sec)

=====================================================================================

JOIN TABEL
cara untuk menghubungkan tabel

1.INNER JOIN
	 
	Struktur 1:
	SELECT tabel1.filed1,tabel2.field2,.......
	FROM tabel1,tabel2
	WHERE tabel1.fieldRealasi=tabel2.fieldRelasi;


CONTOH:
Tampilkan tgl,namabarang,jumlah,harga dan total(jml*hrg)
	tgl,jml,hrg >>ttrans
	nmbrg>>tbrg
ttrans dengan tbrg terhubung dengan kdbrg

CARA1:
	SELECT ttrans.tgl,tbrg.nmbrg,ttrans.jml,ttrans.hrg,
	ttrans.hrg*ttrans.jml AS "Total"
	FROM ttrans,tbrg
	WHERE ttrans.kdbrg=tbrg.kdbrg;

+------------+-----------------------+------+--------+----------+
| tgl        | nmbrg                 | jml  | hrg    | Total    |
+------------+-----------------------+------+--------+----------+
| 2008-09-01 | Komputer Pentium 4    |    5 | 750000 |  3750000 |
| 2008-09-02 | Komputer Pentium 4    |   20 | 750000 | 15000000 |
| 2008-10-01 | Komputer Pentium 4    |   10 | 750000 |  7500000 |
| 2008-10-10 | Komputer Pentium 4    |    5 | 175000 |   875000 |
| 2007-01-10 | Komputer Pentium 4    |    5 | 750000 |  3750000 |
| 2006-02-06 | Komputer Pentium 4    |   12 | 750000 |  9000000 |
| 2005-03-01 | Komputer Pentium 4    |   10 | 750000 |  7500000 |
| 2006-05-31 | Komputer Pentium 4    |   40 | 750000 | 30000000 |
| 2008-09-01 | Notebook ASUS 12 Inch |    5 | 175000 |   875000 |
| 2008-09-01 | Notebook ASUS 12 Inch |    5 | 175000 |   875000 |
| 2008-09-01 | Notebook ASUS 12 Inch |   15 | 175000 |  2625000 |
| 2008-09-02 | Notebook ASUS 12 Inch |   20 | 175000 |  3500000 |
| 2008-09-03 | Notebook ASUS 12 Inch |   30 | 225000 |  6750000 |
| 2007-01-10 | Notebook ASUS 12 Inch |    1 | 175000 |   175000 |
| 2008-09-01 | Disket                |   20 |  25000 |   500000 |
| 2007-01-10 | Disket                |    3 |  25000 |    75000 |
| 2008-09-02 | Hardisk Ext WD 500GB  |   10 | 220000 |  2200000 |
| 2005-03-01 | Hardisk Ext WD 500GB  |   15 | 220000 |  3300000 |
| 2008-09-01 | Flasdisk Kingston 8GB |   10 |  50000 |   500000 |
| 2008-09-03 | Flasdisk Kingston 8GB |   30 |  50000 |  1500000 |
+------------+-----------------------+------+--------+----------+
20 rows in set (0.006 sec)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

CARA 2:(lebih Sederhana):
	SELECT tgl,nmbrg,jml,hrg,hrg*jml AS "Total"
	FROM ttrans,tbrg
	WHERE ttrans.kdbrg=tbrg.kdbrg;

+------------+-----------------------+------+--------+----------+
| tgl        | nmbrg                 | jml  | hrg    | Total    |
+------------+-----------------------+------+--------+----------+
| 2008-09-01 | Komputer Pentium 4    |    5 | 750000 |  3750000 |
| 2008-09-02 | Komputer Pentium 4    |   20 | 750000 | 15000000 |
| 2008-10-01 | Komputer Pentium 4    |   10 | 750000 |  7500000 |
| 2008-10-10 | Komputer Pentium 4    |    5 | 175000 |   875000 |
| 2007-01-10 | Komputer Pentium 4    |    5 | 750000 |  3750000 |
| 2006-02-06 | Komputer Pentium 4    |   12 | 750000 |  9000000 |
| 2005-03-01 | Komputer Pentium 4    |   10 | 750000 |  7500000 |
| 2006-05-31 | Komputer Pentium 4    |   40 | 750000 | 30000000 |
| 2008-09-01 | Notebook ASUS 12 Inch |    5 | 175000 |   875000 |
| 2008-09-01 | Notebook ASUS 12 Inch |    5 | 175000 |   875000 |
| 2008-09-01 | Notebook ASUS 12 Inch |   15 | 175000 |  2625000 |
| 2008-09-02 | Notebook ASUS 12 Inch |   20 | 175000 |  3500000 |
| 2008-09-03 | Notebook ASUS 12 Inch |   30 | 225000 |  6750000 |
| 2007-01-10 | Notebook ASUS 12 Inch |    1 | 175000 |   175000 |
| 2008-09-01 | Disket                |   20 |  25000 |   500000 |
| 2007-01-10 | Disket                |    3 |  25000 |    75000 |
| 2008-09-02 | Hardisk Ext WD 500GB  |   10 | 220000 |  2200000 |
| 2005-03-01 | Hardisk Ext WD 500GB  |   15 | 220000 |  3300000 |
| 2008-09-01 | Flasdisk Kingston 8GB |   10 |  50000 |   500000 |
| 2008-09-03 | Flasdisk Kingston 8GB |   30 |  50000 |  1500000 |
+------------+-----------------------+------+--------+----------+
20 rows in set (0.001 sec)


Tampilkan tgl,kdbrg,kdlgn,jumlah,harga
	tgl,jml,hrg >>ttrans
	nmbrg>>tbrg
ttrans dengan tbrg terhubung dengan kdbrg

	SELECT tgl,tbrg.kdbrg,nmbrg,kdlgn,jml,hrg
	FROM ttrans,tbrg
	WHERE ttrans.kdbrg=tbrg.kdbrg;

SELECT tgl,tbrg.kdbrg,nmbrg,kdlgn,jml,hrg
    -> FROM ttrans,tbrg
    -> WHERE ttrans.kdbrg=tbrg.kdbrg;
+------------+-------+-----------------------+-------+------+--------+
| tgl        | kdbrg | nmbrg                 | kdlgn | jml  | hrg    |
+------------+-------+-----------------------+-------+------+--------+
| 2008-09-01 | B001  | Komputer Pentium 4    | P001  |    5 | 750000 |
| 2008-09-02 | B001  | Komputer Pentium 4    | P002  |   20 | 750000 |
| 2008-10-01 | B001  | Komputer Pentium 4    | P003  |   10 | 750000 |
| 2008-10-10 | B001  | Komputer Pentium 4    | P002  |    5 | 175000 |
| 2007-01-10 | B001  | Komputer Pentium 4    | P003  |    5 | 750000 |
| 2006-02-06 | B001  | Komputer Pentium 4    | P004  |   12 | 750000 |
| 2005-03-01 | B001  | Komputer Pentium 4    | P002  |   10 | 750000 |
| 2006-05-31 | B001  | Komputer Pentium 4    | P001  |   40 | 750000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch | P001  |    5 | 175000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch | P001  |    5 | 175000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch | P002  |   15 | 175000 |
| 2008-09-02 | B002  | Notebook ASUS 12 Inch | P002  |   20 | 175000 |
| 2008-09-03 | B002  | Notebook ASUS 12 Inch | P003  |   30 | 225000 |
| 2007-01-10 | B002  | Notebook ASUS 12 Inch | P003  |    1 | 175000 |
| 2008-09-01 | B003  | Disket                | P001  |   20 |  25000 |
| 2007-01-10 | B003  | Disket                | P003  |    3 |  25000 |
| 2008-09-02 | B004  | Hardisk Ext WD 500GB  | P003  |   10 | 220000 |
| 2005-03-01 | B004  | Hardisk Ext WD 500GB  | P002  |   15 | 220000 |
| 2008-09-01 | B005  | Flasdisk Kingston 8GB | P002  |   10 |  50000 |
| 2008-09-03 | B005  | Flasdisk Kingston 8GB | P003  |   30 |  50000 |
+------------+-------+-----------------------+-------+------+--------+
20 rows in set (0.001 sec)

Bagaimana kalau proses JOIN lebih dari 2 tabel?
CONTOH 2:
  Tampilkan tgl,namapelanggan,namabarang,jml,harga,total. hanya 5 data total tertinggi.
	tgl,jml,hrg=>ttrans
	nmlgn=>tpelanggan
	nmbrg=>tbrg

SELECT tgl,nmlgn,nmbrg,jml,hrg, jml*hrg AS 'Total'
FROM tbrg,ttrans,tpelanggan
WHERE tbrg.kdbrg = ttrans.kdbrg AND ttrans.kdlgn = tpelanggan.kdlgn
ORDER BY Total DESC
LIMIT 5;
+------------+--------------+--------------------+------+--------+----------+
| tgl        | nmlgn        | nmbrg              | jml  | hrg    | Total    |
+------------+--------------+--------------------+------+--------+----------+
| 2006-05-31 | Galaxy Media | Komputer Pentium 4 |   40 | 750000 | 30000000 |
| 2008-09-02 | Gamatechno   | Komputer Pentium 4 |   20 | 750000 | 15000000 |
| 2006-02-06 | JJ ENT       | Komputer Pentium 4 |   12 | 750000 |  9000000 |
| 2005-03-01 | Gamatechno   | Komputer Pentium 4 |   10 | 750000 |  7500000 |
| 2008-10-01 | Citra Mozaic | Komputer Pentium 4 |   10 | 750000 |  7500000 |
+------------+--------------+--------------------+------+--------+----------+
5 rows in set (0.001 sec)


Tampilkan NamaBarang dan Namapelanggan

SELECT nmbrg AS 'Nama Barang', nmlgn AS 'Nama Pelanggan'
FROM tbrg,ttrans,tpelanggan
WHERE tbrg.kdbrg = ttrans.kdbrg AND ttrans.kdlgn = tpelanggan.kdlgn;
+-----------------------+----------------+
| Nama Barang           | Nama Pelanggan |
+-----------------------+----------------+
| Komputer Pentium 4    | Galaxy Media   |
| Komputer Pentium 4    | Gamatechno     |
| Komputer Pentium 4    | Citra Mozaic   |
| Komputer Pentium 4    | Gamatechno     |
| Komputer Pentium 4    | Citra Mozaic   |
| Komputer Pentium 4    | JJ ENT         |
| Komputer Pentium 4    | Gamatechno     |
| Komputer Pentium 4    | Galaxy Media   |
| Notebook ASUS 12 Inch | Galaxy Media   |
| Notebook ASUS 12 Inch | Galaxy Media   |
| Notebook ASUS 12 Inch | Gamatechno     |
| Notebook ASUS 12 Inch | Gamatechno     |
| Notebook ASUS 12 Inch | Citra Mozaic   |
| Notebook ASUS 12 Inch | Citra Mozaic   |
| Disket                | Galaxy Media   |
| Disket                | Citra Mozaic   |
| Hardisk Ext WD 500GB  | Citra Mozaic   |
| Hardisk Ext WD 500GB  | Gamatechno     |
| Flasdisk Kingston 8GB | Gamatechno     |
| Flasdisk Kingston 8GB | Citra Mozaic   |
+-----------------------+----------------+
20 rows in set (0.001 sec)

=============================================================================

STRUKTUR 2:
	SELECT field1,field2
	FROM tabel1 INNER JOIN tabel2
	ON tabel1.fieldRelasi = tabel2.fielrelasi

CONTOH
Tampilkan tgl,namabarang,jumlah,harga dan total(jml*hrg)

	SELECT tgl, nmbrg, jml, hrg, jml*hrg AS 'Total'
	FROM tbrg INNER JOIN ttrans
	ON tbrg.kdbrg = ttrans.kdbrg;

SELECT tgl, nmbrg, jml, hrg, jml*hrg AS 'Total'
    -> FROM tbrg INNER JOIN ttrans
    -> ON tbrg.kdbrg = ttrans.kdbrg;
+------------+-----------------------+------+--------+----------+
| tgl        | nmbrg                 | jml  | hrg    | Total    |
+------------+-----------------------+------+--------+----------+
| 2008-09-01 | Komputer Pentium 4    |    5 | 750000 |  3750000 |
| 2008-09-02 | Komputer Pentium 4    |   20 | 750000 | 15000000 |
| 2008-10-01 | Komputer Pentium 4    |   10 | 750000 |  7500000 |
| 2008-10-10 | Komputer Pentium 4    |    5 | 175000 |   875000 |
| 2007-01-10 | Komputer Pentium 4    |    5 | 750000 |  3750000 |
| 2006-02-06 | Komputer Pentium 4    |   12 | 750000 |  9000000 |
| 2005-03-01 | Komputer Pentium 4    |   10 | 750000 |  7500000 |
| 2006-05-31 | Komputer Pentium 4    |   40 | 750000 | 30000000 |
| 2008-09-01 | Notebook ASUS 12 Inch |    5 | 175000 |   875000 |
| 2008-09-01 | Notebook ASUS 12 Inch |    5 | 175000 |   875000 |
| 2008-09-01 | Notebook ASUS 12 Inch |   15 | 175000 |  2625000 |
| 2008-09-02 | Notebook ASUS 12 Inch |   20 | 175000 |  3500000 |
| 2008-09-03 | Notebook ASUS 12 Inch |   30 | 225000 |  6750000 |
| 2007-01-10 | Notebook ASUS 12 Inch |    1 | 175000 |   175000 |
| 2008-09-01 | Disket                |   20 |  25000 |   500000 |
| 2007-01-10 | Disket                |    3 |  25000 |    75000 |
| 2008-09-02 | Hardisk Ext WD 500GB  |   10 | 220000 |  2200000 |
| 2005-03-01 | Hardisk Ext WD 500GB  |   15 | 220000 |  3300000 |
| 2008-09-01 | Flasdisk Kingston 8GB |   10 |  50000 |   500000 |
| 2008-09-03 | Flasdisk Kingston 8GB |   30 |  50000 |  1500000 |
+------------+-----------------------+------+--------+----------+
20 rows in set (0.001 sec)


CONTOH 2:
Tampilkan tgl,namapelanggan,namabarang,jml,harga,total. hanya 5 data total tertinggi untuk pelanggan selain kode P001

CARA1:
	
SELECT tgl,nmlgn,nmbrg,jml,hrg, jml*hrg AS 'Total'
FROM tbrg JOIN ttrans JOIN tpelanggan
ON tbrg.kdbrg = ttrans.kdbrg AND ttrans.kdlgn = tpelanggan.kdlgn
WHERE tpelanggan.kdlgn <> 'P001'
ORDER BY Total DESC
LIMIT 5;

CARA 2:
	
SELECT tgl,nmlgn,nmbrg,jml,hrg, jml*hrg AS 'Total'
FROM tbrg JOIN ttrans ON tbrg.kdbrg = ttrans.kdbrg
JOIN tpelanggan ON ttrans.kdlgn = tpelanggan.kdlgn
WHERE tpelanggan.kdlgn <> 'P001'
ORDER BY Total DESC
LIMIT 5;

CARA1:

 SELECT tgl,nmlgn,nmbrg,jml,hrg, jml*hrg AS 'Total'
    -> FROM tbrg JOIN ttrans JOIN tpelanggan
    -> ON tbrg.kdbrg = ttrans.kdbrg AND ttrans.kdlgn = tpelanggan.kdlgn
    -> WHERE tpelanggan.kdlgn <> 'P001'
    -> ORDER BY Total DESC
    -> LIMIT 5;
+------------+--------------+-----------------------+------+--------+----------+
| tgl        | nmlgn        | nmbrg                 | jml  | hrg    | Total    |
+------------+--------------+-----------------------+------+--------+----------+
| 2008-09-02 | Gamatechno   | Komputer Pentium 4    |   20 | 750000 | 15000000 |
| 2006-02-06 | JJ ENT       | Komputer Pentium 4    |   12 | 750000 |  9000000 |
| 2008-10-01 | Citra Mozaic | Komputer Pentium 4    |   10 | 750000 |  7500000 |
| 2005-03-01 | Gamatechno   | Komputer Pentium 4    |   10 | 750000 |  7500000 |
| 2008-09-03 | Citra Mozaic | Notebook ASUS 12 Inch |   30 | 225000 |  6750000 |
+------------+--------------+-----------------------+------+--------+----------+
5 rows in set (0.001 sec)


CARA 2:
SELECT tgl,nmlgn,nmbrg,jml,hrg, jml*hrg AS 'Total'
    -> FROM tbrg JOIN ttrans ON tbrg.kdbrg = ttrans.kdbrg
    -> JOIN tpelanggan ON ttrans.kdlgn = tpelanggan.kdlgn
    -> WHERE tpelanggan.kdlgn <> 'P001'
    -> ORDER BY Total DESC
    -> LIMIT 5;
+------------+--------------+-----------------------+------+--------+----------+
| tgl        | nmlgn        | nmbrg                 | jml  | hrg    | Total    |
+------------+--------------+-----------------------+------+--------+----------+
| 2008-09-02 | Gamatechno   | Komputer Pentium 4    |   20 | 750000 | 15000000 |
| 2006-02-06 | JJ ENT       | Komputer Pentium 4    |   12 | 750000 |  9000000 |
| 2008-10-01 | Citra Mozaic | Komputer Pentium 4    |   10 | 750000 |  7500000 |
| 2005-03-01 | Gamatechno   | Komputer Pentium 4    |   10 | 750000 |  7500000 |
| 2008-09-03 | Citra Mozaic | Notebook ASUS 12 Inch |   30 | 225000 |  6750000 |
+------------+--------------+-----------------------+------+--------+----------+
5 rows in set (0.001 sec)

============================================================================



SOAL DBPENJUALAN:
1.Tampilkan kode barang, nama barang, satuan, jumlah dan harga barang utuk barang yang memiliki satuan unit.

	Struktur 1:

SELECT tbrg.kdbrg, nmbrg, satuan, jml, hrg
FROM tbrg,ttrans
WHERE tbrg.kdbrg = ttrans.kdbrg AND satuan = 'Unit';
+-------+-----------------------+--------+------+--------+
| kdbrg | nmbrg                 | satuan | jml  | hrg    |
+-------+-----------------------+--------+------+--------+
| B001  | Komputer Pentium 4    | Unit   |    5 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |   20 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |   10 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |    5 | 175000 |
| B001  | Komputer Pentium 4    | Unit   |    5 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |   12 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |   10 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |   40 | 750000 |
| B002  | Notebook ASUS 12 Inch | Unit   |    5 | 175000 |
| B002  | Notebook ASUS 12 Inch | Unit   |    5 | 175000 |
| B002  | Notebook ASUS 12 Inch | Unit   |   15 | 175000 |
| B002  | Notebook ASUS 12 Inch | Unit   |   20 | 175000 |
| B002  | Notebook ASUS 12 Inch | Unit   |   30 | 225000 |
| B002  | Notebook ASUS 12 Inch | Unit   |    1 | 175000 |
+-------+-----------------------+--------+------+--------+
14 rows in set (0.001 sec)

	Struktur 2:

SELECT tbrg.kdbrg, nmbrg, satuan, jml, hrg
FROM tbrg JOIN ttrans ON tbrg.kdbrg = ttrans.kdbrg
WHERE satuan ='Unit';
+-------+-----------------------+--------+------+--------+
| kdbrg | nmbrg                 | satuan | jml  | hrg    |
+-------+-----------------------+--------+------+--------+
| B001  | Komputer Pentium 4    | Unit   |    5 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |   20 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |   10 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |    5 | 175000 |
| B001  | Komputer Pentium 4    | Unit   |    5 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |   12 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |   10 | 750000 |
| B001  | Komputer Pentium 4    | Unit   |   40 | 750000 |
| B002  | Notebook ASUS 12 Inch | Unit   |    5 | 175000 |
| B002  | Notebook ASUS 12 Inch | Unit   |    5 | 175000 |
| B002  | Notebook ASUS 12 Inch | Unit   |   15 | 175000 |
| B002  | Notebook ASUS 12 Inch | Unit   |   20 | 175000 |
| B002  | Notebook ASUS 12 Inch | Unit   |   30 | 225000 |
| B002  | Notebook ASUS 12 Inch | Unit   |    1 | 175000 |
+-------+-----------------------+--------+------+--------+
14 rows in set (0.001 sec)

2.Tampilkan nama pelanggan, alamat, jumlah, dan harga barang untuk barang yang dibeli pada tahun 2007.

SELECT nmlgn, almlgn, ttrans.tgl, ttrans.jml, hrg
FROM ttrans JOIN tpelanggan ON ttrans.kdlgn = tpelanggan.kdlgn
WHERE tgl BETWEEN 20070101 AND 20071231;
+--------------+-------------+------------+------+--------+
| nmlgn        | almlgn      | tgl        | jml  | hrg    |
+--------------+-------------+------------+------+--------+
| Citra Mozaic | Jl. Veteran | 2007-01-10 |    5 | 750000 |
| Citra Mozaic | Jl. Veteran | 2007-01-10 |    1 | 175000 |
| Citra Mozaic | Jl. Veteran | 2007-01-10 |    3 |  25000 |
+--------------+-------------+------------+------+--------+
3 rows in set (0.001 sec)

3.Tampilkan nama barang yang dibeli oleh pelanggan yang bernama gamatecno

SELECT nmbrg, nmlgn
FROM tbrg JOIN ttrans ON tbrg.kdbrg = ttrans.kdbrg 
JOIN tpelanggan ON ttrans.kdlgn = tpelanggan.kdlgn
WHERE tpelanggan.nmlgn ='Gamatechno';

+-----------------------+------------+
| nmbrg                 | nmlgn      |
+-----------------------+------------+
| Komputer Pentium 4    | Gamatechno |
| Komputer Pentium 4    | Gamatechno |
| Komputer Pentium 4    | Gamatechno |
| Notebook ASUS 12 Inch | Gamatechno |
| Notebook ASUS 12 Inch | Gamatechno |
| Hardisk Ext WD 500GB  | Gamatechno |
| Flasdisk Kingston 8GB | Gamatechno |
+-----------------------+------------+
7 rows in set (0.002 sec)

 SELECT DISTINCT nmbrg, nmlgn
    -> FROM tbrg JOIN ttrans ON tbrg.kdbrg = ttrans.kdbrg
    -> JOIN tpelanggan ON ttrans.kdlgn = tpelanggan.kdlgn
    -> WHERE tpelanggan.nmlgn ='Gamatechno';
+-----------------------+------------+
| nmbrg                 | nmlgn      |
+-----------------------+------------+
| Komputer Pentium 4    | Gamatechno |
| Notebook ASUS 12 Inch | Gamatechno |
| Hardisk Ext WD 500GB  | Gamatechno |
| Flasdisk Kingston 8GB | Gamatechno |
+-----------------------+------------+
4 rows in set (0.001 sec)


4.Siapa saja pelanggan yang membeli flashdisk ditahun 2008?



SOAL DBPERKULIAHAN:
1.Tampilkan nama mahasiswa, nilai matakuliah

2.Tampilkan siapa saja mahasiswa yang mengambil mata kuliah basis data 

3.Tampilkan nama mahasiswa, mata_kuliah, nama dosen.



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

15 Desember 2021

JENIS-JENIS
===========
	1. INNER JOIN
	2. OUTER JOIN
		Full Outer Join
		Right Outer Join
		Left Outer Join
	3. Self Join
 	4. Cross Join


INNER JOIN
STruktur 1: FROM....WHERE
	SELECT field1,field2,namatabel.field3
	FROM tabel1,tabel2,tabel3
	WHERE tabel1.fieldRealasi=tabel2.fieldRelasi AND
		tabel2.fieldRealasi=tabel3.fieldRelasi



Struktur 2: JOIN - ON
2 tabel:
	SELECT field1,field2,namatabel.field3
	FROM tabel1 JOIN tabel2 ON tabel1.fieldRealasi=tabel2.fieldRelasi;

3 tabel:
	SELECT field1,field2,namatabel.field3
	FROM tabel1 JOIN tabel2 
	ON tabel1.fieldRealasi=tabel2.fieldRelasi
	JOIN tabel3
	tabel2.fieldRealasi=tabel3.fieldRelasi;

atau
	SELECT field1,field2,namatabel.field3
	FROM tabel1 JOIN tabel2 JOIN tabel3
	ON tabel1.fieldRealasi=tabel2.fieldRelasi AND
	tabel2.fieldRealasi=tabel3.fieldRelasi;


Struktur 3:

	SELECT field1,field2,namatabel.field3
	FROM tabel1 JOIN tabel2 USING(fieldrelasi);

	
	SELECT field1,field2,namatabel.field3
	FROM tabel1 JOIN tabel2 USING(fieldrelasi)
	JOIN tabel3 USING(fieldrelasi);

======================================================
OUTER JOIN

1. Left Outer Join
....Mengambil seluruh data pada tabel sebelah kiri dari JOIN baik yang berelasi dengan tabel kanan maupun tidak

Struktur 1:
	SELECT field1,field2
	FROM tabel1 LEFT OUTER JOIN tabel2
	ON tabel1.fieldrelasi - tabel2.fieldrelasi;

	SELECT field1,field2
	FROM tabel1 LEFT JOIN tabel2
	ON tabel1.fieldrelasi - tabel2.fieldrelasi;

atau kalau fieldrelasi memiliki nama yang sama dikedua tabel, bisa digunakan:

	SELECT field1, field2
	FROM tabel1 LEFT OUTER JOIN tabel 2 USING(fieldrelasi);

	SELECT field1, field2
	FROM tabel1 LEFT JOIN tabel 2 USING(fieldrelasi);

CONTOH:
	Tampilkan data tgl transaksi, namabarang, jumlah, harga untuk seluruh barang baik yang sudah terjual maupun tidak.

	SELECT tgl,tbrg.kdbrg,nmbrg,jml,hrg
	FROM tbrg LEFT JOIN ttrans
	ON tbrg.kdbrg = ttrans.kdbrg;

	SELECT tgl,tbrg.kdbrg,nmbrg,jml,hrg
	FROM tbrg LEFT JOIN ttrans USING(kdbrg);
	
	SELECT tgl,ttrans.kdbrg,nmbrg,jml,hrg
	FROM tbrg LEFT JOIN ttrans
	ON tbrg.kdbrg = ttrans.kdbrg;

SELECT tgl,tbrg.kdbrg,nmbrg,jml,hrg
    -> FROM tbrg LEFT JOIN ttrans
    -> ON tbrg.kdbrg = ttrans.kdbrg;
+------------+-------+-------------------------+------+--------+
| tgl        | kdbrg | nmbrg                   | jml  | hrg    |
+------------+-------+-------------------------+------+--------+
| 2008-09-01 | B001  | Komputer Pentium 4      |    5 | 750000 |
| 2008-09-02 | B001  | Komputer Pentium 4      |   20 | 750000 |
| 2008-10-01 | B001  | Komputer Pentium 4      |   10 | 750000 |
| 2008-10-10 | B001  | Komputer Pentium 4      |    5 | 175000 |
| 2007-01-10 | B001  | Komputer Pentium 4      |    5 | 750000 |
| 2006-02-06 | B001  | Komputer Pentium 4      |   12 | 750000 |
| 2005-03-01 | B001  | Komputer Pentium 4      |   10 | 750000 |
| 2006-05-31 | B001  | Komputer Pentium 4      |   40 | 750000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch   |    5 | 175000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch   |    5 | 175000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch   |   15 | 175000 |
| 2008-09-02 | B002  | Notebook ASUS 12 Inch   |   20 | 175000 |
| 2008-09-03 | B002  | Notebook ASUS 12 Inch   |   30 | 225000 |
| 2007-01-10 | B002  | Notebook ASUS 12 Inch   |    1 | 175000 |
| 2008-09-01 | B003  | Disket                  |   20 |  25000 |
| 2007-01-10 | B003  | Disket                  |    3 |  25000 |
| 2008-09-02 | B004  | Hardisk Ext WD 500GB    |   10 | 220000 |
| 2005-03-01 | B004  | Hardisk Ext WD 500GB    |   15 | 220000 |
| 2008-09-01 | B005  | Flasdisk Kingston 8GB   |   10 |  50000 |
| 2008-09-03 | B005  | Flasdisk Kingston 8GB   |   30 |  50000 |
| NULL       | B006  | Monitor Samsung 15 Inch | NULL |   NULL |
| NULL       | B007  | Mouse Wireless Logitech | NULL |   NULL |
+------------+-------+-------------------------+------+--------+
22 rows in set (0.012 sec)


SELECT tgl,tbrg.kdbrg,nmbrg,jml,hrg
    -> FROM tbrg LEFT JOIN ttrans USING(kdbrg);
+------------+-------+-------------------------+------+--------+
| tgl        | kdbrg | nmbrg                   | jml  | hrg    |
+------------+-------+-------------------------+------+--------+
| 2008-09-01 | B001  | Komputer Pentium 4      |    5 | 750000 |
| 2008-09-02 | B001  | Komputer Pentium 4      |   20 | 750000 |
| 2008-10-01 | B001  | Komputer Pentium 4      |   10 | 750000 |
| 2008-10-10 | B001  | Komputer Pentium 4      |    5 | 175000 |
| 2007-01-10 | B001  | Komputer Pentium 4      |    5 | 750000 |
| 2006-02-06 | B001  | Komputer Pentium 4      |   12 | 750000 |
| 2005-03-01 | B001  | Komputer Pentium 4      |   10 | 750000 |
| 2006-05-31 | B001  | Komputer Pentium 4      |   40 | 750000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch   |    5 | 175000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch   |    5 | 175000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch   |   15 | 175000 |
| 2008-09-02 | B002  | Notebook ASUS 12 Inch   |   20 | 175000 |
| 2008-09-03 | B002  | Notebook ASUS 12 Inch   |   30 | 225000 |
| 2007-01-10 | B002  | Notebook ASUS 12 Inch   |    1 | 175000 |
| 2008-09-01 | B003  | Disket                  |   20 |  25000 |
| 2007-01-10 | B003  | Disket                  |    3 |  25000 |
| 2008-09-02 | B004  | Hardisk Ext WD 500GB    |   10 | 220000 |
| 2005-03-01 | B004  | Hardisk Ext WD 500GB    |   15 | 220000 |
| 2008-09-01 | B005  | Flasdisk Kingston 8GB   |   10 |  50000 |
| 2008-09-03 | B005  | Flasdisk Kingston 8GB   |   30 |  50000 |
| NULL       | B006  | Monitor Samsung 15 Inch | NULL |   NULL |
| NULL       | B007  | Mouse Wireless Logitech | NULL |   NULL |
+------------+-------+-------------------------+------+--------+
22 rows in set (0.002 sec)


MariaDB [dbpenjualan]> SELECT tgl,ttrans.kdbrg,nmbrg,jml,hrg
    -> FROM tbrg LEFT JOIN ttrans
    -> ON tbrg.kdbrg = ttrans.kdbrg;
+------------+-------+-------------------------+------+--------+
| tgl        | kdbrg | nmbrg                   | jml  | hrg    |
+------------+-------+-------------------------+------+--------+
| 2008-09-01 | B001  | Komputer Pentium 4      |    5 | 750000 |
| 2008-09-02 | B001  | Komputer Pentium 4      |   20 | 750000 |
| 2008-10-01 | B001  | Komputer Pentium 4      |   10 | 750000 |
| 2008-10-10 | B001  | Komputer Pentium 4      |    5 | 175000 |
| 2007-01-10 | B001  | Komputer Pentium 4      |    5 | 750000 |
| 2006-02-06 | B001  | Komputer Pentium 4      |   12 | 750000 |
| 2005-03-01 | B001  | Komputer Pentium 4      |   10 | 750000 |
| 2006-05-31 | B001  | Komputer Pentium 4      |   40 | 750000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch   |    5 | 175000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch   |    5 | 175000 |
| 2008-09-01 | B002  | Notebook ASUS 12 Inch   |   15 | 175000 |
| 2008-09-02 | B002  | Notebook ASUS 12 Inch   |   20 | 175000 |
| 2008-09-03 | B002  | Notebook ASUS 12 Inch   |   30 | 225000 |
| 2007-01-10 | B002  | Notebook ASUS 12 Inch   |    1 | 175000 |
| 2008-09-01 | B003  | Disket                  |   20 |  25000 |
| 2007-01-10 | B003  | Disket                  |    3 |  25000 |
| 2008-09-02 | B004  | Hardisk Ext WD 500GB    |   10 | 220000 |
| 2005-03-01 | B004  | Hardisk Ext WD 500GB    |   15 | 220000 |
| 2008-09-01 | B005  | Flasdisk Kingston 8GB   |   10 |  50000 |
| 2008-09-03 | B005  | Flasdisk Kingston 8GB   |   30 |  50000 |
| NULL       | NULL  | Monitor Samsung 15 Inch | NULL |   NULL |
| NULL       | NULL  | Mouse Wireless Logitech | NULL |   NULL |
+------------+-------+-------------------------+------+--------+
22 rows in set (0.001 sec)


=================================================================================


2. Right Outer Join
....Mengambil seluruh data pada tabel sebelah kanan dari JOIN baik yang berelasi dengan tabel kiri maupun tidak

Struktur 1:
	SELECT field1,field2
	FROM tabel1 RIGHT OUTER JOIN tabel2
	ON tabel1.fieldrelasi - tabel2.fieldrelasi;

	SELECT field1,field2
	FROM tabel1 RIGHT JOIN tabel2
	ON tabel1.fieldrelasi - tabel2.fieldrelasi;

atau kalau fieldrelasi memiliki nama yang sama dikedua tabel, bisa digunakan:

	SELECT field1, field2
	FROM tabel1 RIGHT OUTER JOIN tabel 2 USING(fieldrelasi);

	SELECT field1, field2
	FROM tabel1 RIGHT JOIN tabel 2 USING(fieldrelasi);


CONTOH:
	Tampilkan data tgl transaksi, namabarang, jumlah, harga untuk seluruh barang baik yang sudah terjual maupun tidak.


	SELECT tgl,ttrans.kdbrg,nmbrg,jml,hrg
	FROM ttrans RIGHT JOIN tbrg
	ON tbrg.kdbrg = ttrans.kdbrg;

	SELECT tgl,tbrg.kdbrg,nmbrg,jml,hrg
	FROM ttrans RIGHT JOIN tbrg USING(kdbrg);


CONTOH:
DBJUAL
	Tampilkan seluruh namapelanggan beserta alamat dan tanggal transaksi untuk pelanggan yang pernah maupun belum bertransaksi

	SELECT nmlgn,ttrans.kdlgn,almlgn,tgl
	FROM tpelanggan LEFT JOIN ttrans
	ON tpelanggan.kdlgn = ttrans.kdlgn;


	SELECT nmlgn,ttrans.kdlgn,almlgn,tgl
	FROM ttrans RIGHT JOIN tpelanggan
	ON tpelanggan.kdlgn = ttrans.kdlgn;

SELECT nmlgn,ttrans.kdlgn,almlgn,tgl
    -> FROM tpelanggan LEFT JOIN ttrans
    -> ON tpelanggan.kdlgn = ttrans.kdlgn;
+--------------+-------+-----------------+------------+
| nmlgn        | kdlgn | almlgn          | tgl        |
+--------------+-------+-----------------+------------+
| Galaxy Media | P001  | Birugo          | 2008-09-01 |
| Galaxy Media | P001  | Birugo          | 2008-09-01 |
| Galaxy Media | P001  | Birugo          | 2008-09-01 |
| Galaxy Media | P001  | Birugo          | 2008-09-01 |
| Galaxy Media | P001  | Birugo          | 2006-05-31 |
| Gamatechno   | P002  | Anduring        | 2008-09-01 |
| Gamatechno   | P002  | Anduring        | 2008-09-01 |
| Gamatechno   | P002  | Anduring        | 2008-09-02 |
| Gamatechno   | P002  | Anduring        | 2008-09-02 |
| Gamatechno   | P002  | Anduring        | 2008-10-10 |
| Gamatechno   | P002  | Anduring        | 2005-03-01 |
| Gamatechno   | P002  | Anduring        | 2005-03-01 |
| Citra Mozaic | P003  | Jl. Veteran     | 2008-09-02 |
| Citra Mozaic | P003  | Jl. Veteran     | 2008-09-03 |
| Citra Mozaic | P003  | Jl. Veteran     | 2008-09-03 |
| Citra Mozaic | P003  | Jl. Veteran     | 2008-10-01 |
| Citra Mozaic | P003  | Jl. Veteran     | 2007-01-10 |
| Citra Mozaic | P003  | Jl. Veteran     | 2007-01-10 |
| Citra Mozaic | P003  | Jl. Veteran     | 2007-01-10 |
| JJ ENT       | P004  | Khatib Sulaiman | 2006-02-06 |
| Green Media  | NULL  | Jambu Air       | NULL       |
| Tk. Intan    | NULL  | Jl.S.Hatta      | NULL       |
| Onexindo     | NULL  | Pauh            | NULL       |
| Rudi         | NULL  | NULL            | NULL       |
| Citra        | NULL  | NULL            | NULL       |
| Anwar        | NULL  | NULL            | NULL       |
| Raffi        | NULL  | NULL            | NULL       |
| Citra        | NULL  | NULL            | NULL       |
| NULL         | NULL  | Padang          | NULL       |
+--------------+-------+-----------------+------------+
29 rows in set (0.010 sec)

SELECT nmlgn,ttrans.kdlgn,almlgn,tgl
    -> FROM ttrans RIGHT JOIN tpelanggan
    -> ON tpelanggan.kdlgn = ttrans.kdlgn;
+--------------+-------+-----------------+------------+
| nmlgn        | kdlgn | almlgn          | tgl        |
+--------------+-------+-----------------+------------+
| Galaxy Media | P001  | Birugo          | 2008-09-01 |
| Galaxy Media | P001  | Birugo          | 2008-09-01 |
| Galaxy Media | P001  | Birugo          | 2008-09-01 |
| Galaxy Media | P001  | Birugo          | 2008-09-01 |
| Galaxy Media | P001  | Birugo          | 2006-05-31 |
| Gamatechno   | P002  | Anduring        | 2008-09-01 |
| Gamatechno   | P002  | Anduring        | 2008-09-01 |
| Gamatechno   | P002  | Anduring        | 2008-09-02 |
| Gamatechno   | P002  | Anduring        | 2008-09-02 |
| Gamatechno   | P002  | Anduring        | 2008-10-10 |
| Gamatechno   | P002  | Anduring        | 2005-03-01 |
| Gamatechno   | P002  | Anduring        | 2005-03-01 |
| Citra Mozaic | P003  | Jl. Veteran     | 2008-09-02 |
| Citra Mozaic | P003  | Jl. Veteran     | 2008-09-03 |
| Citra Mozaic | P003  | Jl. Veteran     | 2008-09-03 |
| Citra Mozaic | P003  | Jl. Veteran     | 2008-10-01 |
| Citra Mozaic | P003  | Jl. Veteran     | 2007-01-10 |
| Citra Mozaic | P003  | Jl. Veteran     | 2007-01-10 |
| Citra Mozaic | P003  | Jl. Veteran     | 2007-01-10 |
| JJ ENT       | P004  | Khatib Sulaiman | 2006-02-06 |
| Green Media  | NULL  | Jambu Air       | NULL       |
| Tk. Intan    | NULL  | Jl.S.Hatta      | NULL       |
| Onexindo     | NULL  | Pauh            | NULL       |
| Rudi         | NULL  | NULL            | NULL       |
| Citra        | NULL  | NULL            | NULL       |
| Anwar        | NULL  | NULL            | NULL       |
| Raffi        | NULL  | NULL            | NULL       |
| Citra        | NULL  | NULL            | NULL       |
| NULL         | NULL  | Padang          | NULL       |
+--------------+-------+-----------------+------------+
29 rows in set (0.001 sec)


CLASSICMODELS
	Tampilkan customerNumber,namalengkap customer(gabungan contactfirstname, contactlastname), ordernumber dan status untuk semua customer baik yang pernah order ataupun tidak. uutkan dari ordernumber desc.

<<<<<<<<<<<<<<<<LEFT JOIN ON>>>>>>>>>>>>>>>>>>>>>>

	SELECT customers.customerNumber, CONCAT(contactFirstName,' ',contactLastName) AS 'FullName', orderNumber, status
	FROM customers LEFT JOIN orders
	ON customers.customerNumber = orders.customerNumber
	WHERE customers.customerNumber > 400
	ORDER BY orderNumber DESC;

<<<<<<<<<<<<<<<<LEFT JOIN USING>>>>>>>>>>>>>>>>>>>>>>

	SELECT customers.customerNumber, CONCAT(contactFirstName,' ',contactLastName) AS 'FullName', orderNumber, status
	FROM customers LEFT JOIN orders USING(customerNumber)
	WHERE customers.customerNumber > 400
	ORDER BY orderNumber DESC;

<<<<<<<<<<<<<<<<RIGHT JOIN ON>>>>>>>>>>>>>>>>>>>>>>

	SELECT customers.customerNumber, CONCAT(contactFirstName,' ',contactLastName) AS 'FullName', orderNumber, status
	FROM  orders RIGHT JOIN customers
	ON customers.customerNumber = orders.customerNumber
	WHERE customers.customerNumber > 400
	ORDER BY orderNumber DESC;

<<<<<<<<<<<<<<<<RIGHT JOIN USING>>>>>>>>>>>>>>>>>>>>>>

	SELECT customers.customerNumber, CONCAT(contactFirstName,' ',contactLastName) AS 'FullName', orderNumber, status
	FROM orders RIGHT JOIN customers USING(customerNumber)
	WHERE customers.customerNumber > 400
	ORDER BY orderNumber DESC;


==================================================================
3. LEFT JOIN WITHOUT INTERSECTION
......Menampilkan data dari tabel sebelah kiri yang tidak berelasi dengan tabel sebelah kanan,(data trb tidak ditemukan ditabel sebelah kanan

Struktur :
	SELECT field1,field2
	FROM tabel1 LEFT OUTER JOIN tabel2
	ON tabel1.fieldrelasi = tabel2.fieldrelasi
	WHERE tabel2.fieldrelasi IS NULL;

	SELECT field1,field2
	FROM tabel1 LEFT JOIN tabel2
	ON tabel1.fieldrelasi = tabel2.fieldrelasi
	WHERE tabel2.fieldrelasi IS NULL;

atau kalau fieldrelasi memiliki nama yang sama dikedua tabel, bisa digunakan:

	SELECT field1, field2
	FROM tabel1 LEFT OUTER JOIN tabel 2 USING(fieldrelasi)
	WHERE tabel2.fieldrelasi IS NULL;

	SELECT field1, field2
	FROM tabel1 LEFT JOIN tabel 2 USING(fieldrelasi)
	WHERE tabel2.fieldrelasi IS NULL;



============================================================================================

4. RIGHT JOIN WITHOUT INTERSECTION
......Menampilkan data dari tabel sebelah kana yang tidak berelasi dengan tabel sebelah kiri,(data trb tidak ditemukan ditabel sebelah kiri)

Struktur 1:
	SELECT field1,field2
	FROM tabel1 RIGHT OUTER JOIN tabel2
	ON tabel1.fieldrelasi = tabel2.fieldrelasi
	WHERE tabel1.fieldrelasi IS NULL;

	SELECT field1,field2
	FROM tabel1 RIGHT JOIN tabel2
	ON tabel1.fieldrelasi = tabel2.fieldrelasi
	WHERE tabel1.fieldrelasi IS NULL;

atau kalau fieldrelasi memiliki nama yang sama dikedua tabel, bisa digunakan:

	SELECT field1, field2
	FROM tabel1 RIGHT OUTER JOIN tabel 2 USING(fieldrelasi)
	WHERE tabel1.fieldrelasi IS NULL;

	SELECT field1, field2
	FROM tabel1 RIGHT JOIN tabel 2 USING(fieldrelasi)
	WHERE tabel1.fieldrelasi IS NULL;


CONTOH:
DBJUAL:
	Tampilkan data barang (kode barang , nama barang, nonota) yang tidak laku

LEFT
	SELECT tbrg.kdbrg,nmbrg
	FROM tbrg LEFT JOIN ttrans
	ON tbrg.kdbrg = ttrans.kdbrg
	WHERE ttrans.kdbrg IS NULL; 

	SELECT tbrg.kdbrg,nmbrg
	FROM tbrg LEFT JOIN ttrans USING(kdbrg)
	WHERE ttrans.kdbrg IS NULL;

RIGHT

	SELECT tbrg.kdbrg,nmbrg
	FROM ttrans RIGHT JOIN tbrg
	ON tbrg.kdbrg = ttrans.kdbrg
	WHERE ttrans.kdbrg IS NULL;

	SELECT tbrg.kdbrg,nmbrg
	FROM ttrans RIGHT JOIN tbrg USING(kdbrg)
	WHERE ttrans.kdbrg IS NULL;


2. Tampilkan data pelanggan yang tidak pernah melakukan pembelian (nama, alamat, dan no tlp)
LEFT
	SELECT tpelanggan.kdlgn,nmlgn, almlgn, telp
	FROM tpelanggan LEFT JOIN ttrans
	ON tpelanggan.kdlgn = ttrans.kdlgn
	WHERE ttrans.kdlgn IS NULL; 

	SELECT tpelanggan.kdlgn,nmlgn, almlgn, telp
	FROM tpelanggan LEFT JOIN ttrans USING(kdlgn)
	WHERE ttrans.kdlgn IS NULL; 

RIGHT

 	SELECT tpelanggan.kdlgn,nmlgn, almlgn, telp
     	FROM ttrans RIGHT JOIN tpelanggan
    	ON tpelanggan.kdlgn = ttrans.kdlgn
     	WHERE ttrans.kdlgn IS NULL;

	SELECT tpelanggan.kdlgn,nmlgn, almlgn, telp
	FROM ttrans RIGHT JOIN tpelanggan USING(kdlgn)
	WHERE ttrans.kdlgn IS NULL; 


CLASSICMODELS
	Tampilkan nama lengkap employee beserta employeenumber, jobtitle yang tidak pernah melayani transaksi penjualan customers

LEFT
	SELECT CONCAT(firstName,' ',lastName) AS 'FullName', employees.employeeNumber, jobTitle 
	FROM employees LEFT JOIN customers
	ON employees.employeeNumber = customers.salesRepEmployeeNumber
	WHERE customers.salesRepEmployeeNumber IS NULL; 


RIGHT

 	SELECT CONCAT(firstName,' ',lastName) AS 'FullName', employees.employeeNumber, jobTitle 
	FROM  customers RIGHT JOIN  employees
	ON employees.employeeNumber = customers.salesRepEmployeeNumber
	WHERE customers.salesRepEmployeeNumber IS NULL; 

==================================================

5. SELF  JOIN
....Join yang merelasikan tabel dengan dirinya sendiri

Jenis relasi
	unary derajat 1
	binary derajat 2
	ternarr derajat 3

cara ==>> tabel dianggap / dialiaskan sebagai 2 tabel berbeda

CONTOH: 
	Tampilkan nama lengkap karyawan beserta nama lengkap manager

	SELECT CONCAT(k.firstName,' ',k.lastName) nama_karyawan,
	CONCAT(m.firstName,' ',m.lastName) nama_manager
	FROM employees k JOIN employees m
	ON k.reportsTo = m.employeeNumber;


SOAL:
1. Tampilkan nama karyawan dan jontitle yang tidak memiliki manager(tidak memberikan laporan kesiapa-siapa)

LEFT
	SELECT CONCAT(k.firstName,' ',k.lastName) nama_karyawan, 
	CONCAT(m.firstName,' ',m.lastName) nama_manager, k.jobTitle
	FROM employees k LEFT JOIN employees m
	ON k.reportsTo = m.employeeNumber;

	SELECT CONCAT(k.firstName,' ',k.lastName) nama_karyawan, k.jobTitle
	FROM employees k LEFT JOIN employees m
	ON k.reportsTo = m.employeeNumber
	WHERE m.employeeNumber IS NULL;

RIGHT
	SELECT CONCAT(k.firstName,' ',k.lastName) nama_karyawan, 
	CONCAT(m.firstName,' ',m.lastName) nama_manager, k.jobTitle
	FROM employees m RIGHT JOIN employees k
	ON k.reportsTo = m.employeeNumber;

	SELECT CONCAT(k.firstName,' ',k.lastName) nama_karyawan, k.jobTitle
	FROM employees k LEFT JOIN employees m
	ON k.reportsTo = m.employeeNumber
	WHERE m.employeeNumber IS NULL;

==========================================================================
SOAL:
1.	Tampilkan customer number, customer name, order number, status untuk semua customer baik yang pernah melakukan transaksi maupun yang belum pernah.

SELECT customerNumber, customerNAme, orderNumber, status
FROM customer LEFT OUTER JOIN orders USING(customerNumber);

2.	Tampilkan nama lengkap employee, employeesnumber, salesrepemployeenumber untuk employee yang tidak pernah melakukan proses sales terhadap customer.

SELECT CONCAT(firtsname,' ',lastname) AS 'employeename', employeeNumber,
salesRepEmployeeNUmber FROM employee LEFT OUTER JOIN customers
ON employees.employeeNumber = customer.salesRepEmployeenumber
WHERE customer.customersSalesRepemployee IS NULL


3.	Adakah offices yang tidak memiliki employee? Ada atau tidaknya buktikan dengan query.

SELECT employeeNumber, reportsTO, offices,ofificeCode
FROM offices LEFT JOIN employees USING (officeCode)
WHERE employees.reportTo IS NULL;

4. Adakah employee yang tidak bekerja di office manapun? Ada atau tidaknya buktikan dengan query.

SELECT employeeNumber, offices.officeCode
FROM offices RIGHT JOIN employees USING(officeCOde)
WHER office.officeCode IS NULL;

5. Tampilkan nama lengkap karyawan, job title karyawan dan nama manajer serta kode dan kota offices untuk karyawan dengan job title : Sales Rep yang kantornya di Kota Paris, Sidney dan London

SELECT CONCAT(k.firstname,' ',k.lastname) AS 'employeeNAme', k.jobtitle AS job_karyawan,
CONCAT(m.firstname,' ',m.lastname) AS 'managerNAme', offices.officecode, city
FROM employees. k JOIN employees m JOIN offices USING(officeCode)
ON k.reportsTo = m.employeeNumber
WHERE city IN9'paris','sydney','london') AND k.jobtitle='sales rep';

6. Tampilkan nama customer, customer number, paymentdate untuk customer yang belum melakukan payments.

SELECT customerNAme, customernNUmber, paymentdate
FROM customer LEFT JOIN payments USING(customerNumber
WHERE payments.customerNUmber IS NULL;

7. Tampilkan nama customer, customernumber dan paymentdate untuk customer yang sudah pernah melakukan order pada bulan mei 2004.

SELECT customerNumber, customername, paymentdate
FROM cusomer LEFT JOIN payments USING 9customersNumber)
WHERE MONTH (paymentDAte)='5' AND YEAR(paymentDAte)='2004';

8. Tampilkan nama lengkap employee, customernumber,checknumber dan amount untuk semua employee yang telah/belum melakukan proses sales terhadap customer dan untuk semua customer baik yang sudah melakukan payments ataupun belum.

SELECT CONCAT(firstnaem,' ',lastname) AS 'employeeNAme', customerNumber, checkNumber, amount
FROM employees LEFT JOIN customers LEFT JOIN payments USING(customerNumber)
ON employees.employeNumber = customer.salerepemployeenumber;

9. Tampilkan productname,quantityinstock, MSRP dan perkiraan kerugian(quantityinstock * MSRP) untuk product yang belum pernah dibeli. Lakukan pembulatan keatas untuk perkiraan kerugian.

SELECT productname, quantityInStock, MSRP, CEIL(quantityINStovk* MSRP) AS 'kerugian'
WHERE products LEFT JOIN orderdetails USING(productCode)
WHERE orderdetails.productcode IS NULL;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@




22 Desember 2022

JOIN
	-INNER JOIN
	-OUTER JOIN (LEFT JOIN, RIGHT JOIN, FULL/UNION)
	-SELF JOIN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

FUNGSI AGGREGATE
======================
.....Terkait dengan query 1 tabel maupun multi tabel
.....Fungsi yang sudah terdefinisi sebelumnya (bawaan dari mysql) yang menampilkan hasil kalkulasi sejumlah nilai menjadi satu keluaran nilai

Ada banyak fungsi aggregate dalam mysql
	AVG() 
	MAX()
	MIN()
	GROUP_CONCAT()
	COUNT()
	SUM()
	STDEV()
	VARIANCE()
	Dan lain-lain

SUM => mencari jumlah data/nilai
COUNT =>
AVG=> mencari nilai rata-rata
MAX=> mencari nilai tertinggi
MAX=> mencari nilai terendah 

Diketahui sebuah tabel terdapat kolom nilai berisikan data:
	90  85  60  75  95  55  80

SELECT SUM(nilai); 	=> 90+85+....+80 = x?
SELECT MAX(nilai); 	=> 95
SELECT MIN(nilai);	=> 55
SELECT COUNT(nilai);	=> 7
SELECT AVG(nilai);   	=> hasil x/7 = ?


Format Dasar
	SELECT fungsiaggregate(namafield) as namafield FROM namatabel;

Contoh:
	Tampilkan total harga, banyaknya data harga/record, rata-rata harga, harga tertinggi dan harga terentah yang ada di tabel ttrans


SELECT MIN(hrg) hargaterendah,MAX(hrg) hargatertinggi,
SUM(hrg) totalharga,COUNT(hrg) banyakrecord ,
AVG(hrg) rata_rata
FROM ttrans;

SELECT MIN(hrg) hargaterendah,MAX(hrg) hargatertinggi,
SUM(hrg) totalharga,COUNT(*) banyakrecord ,
AVG(hrg) rata_rata
FROM ttrans;

SELECT MIN(hrg) hargaterendah,MAX(hrg) hargatertinggi,
    -> SUM(hrg) totalharga,COUNT(hrg) banyakrecord ,
    -> AVG(hrg) rata_rata
    -> FROM ttrans;
+---------------+----------------+------------+--------------+-------------+
| hargaterendah | hargatertinggi | totalharga | banyakrecord | rata_rata   |
+---------------+----------------+------------+--------------+-------------+
|         25000 |         750000 |    7115000 |           20 | 355750.0000 |
+---------------+----------------+------------+--------------+-------------+
1 row in set (0.006 sec)


SOAL:
DBPENJUALAN

1. Tampilkan berapa total harga yang paling kecil pada nonota T001. Tampilkan dengan 2 angka dibelakang koma

SELECT ROUND(MIN(hrg*jml),2) as'Total'
FROM ttrans
WHERE nonota='T001';

SELECT ROUND(MIN(hrg*jml),2) as'Total'
    -> FROM ttrans
    -> WHERE nonota='T001';
+--------+
| Total  |
+--------+
| 500000 |
+--------+
1 row in set (0.006 sec)


2. Tampilkan jumlah rata-rata barang yang terjual dan banyak transaksi yang terjadi di bulan september dengan hasil pembulatan.

SELECT CEIL(AVG(jml)) AS 'Jumlah Rata-Rata', COUNT(*) AS 'Banyak Transaksi'
FROM ttrans
WHERE MONTH(tgl)=9;

SELECT CEIL(AVG(jml)) AS 'Jumlah Rata-Rata', COUNT(*) AS 'Banyak Transaksi'
    -> FROM ttrans
    -> WHERE MONTH(tgl)=9;
+------------------+------------------+
| Jumlah Rata-Rata | Banyak Transaksi |
+------------------+------------------+
|               16 |               11 |
+------------------+------------------+
1 row in set (0.005 sec)


3. Tampilkan berapa jumlah barang yang dibeli oleh pelanggan P001 diluar tahun 2005


SELECT SUM(jml) AS'Jumlah', kdlgn
FROM ttrans
WHERE kdlgn ='P001' AND YEAR(tgl)='2005';

SELECT SUM(jml) AS'Jumlah', kdlgn
    -> FROM ttrans
    -> WHERE kdlgn ='P001' AND YEAR(tgl)='2005';
+--------+-------+
| Jumlah | kdlgn |
+--------+-------+
|   NULL | NULL  |
+--------+-------+
1 row in set (0.007 sec)


4. Berapa orang pelanggan yang berasal dari luar kota padang


SELECT COUNT(*) AS 'Banyak Pelanggan'
FROM tpelanggan
WHERE kota != 'Padang';


 SELECT COUNT(*) AS 'Banyak Pelanggan'
    -> FROM tpelanggan
    -> WHERE kota != 'Padang';
+------------------+
| Banyak Pelanggan |
+------------------+
|                5 |
+------------------+
1 row in set (0.001 sec)


DBPerkuliahan
1. Berapa orang mahasiswa yang mendapat nilai A


SELECT COUNT(nilai) AS 'Banyak Mahasiswa = A', nilai
FROM t_ambil
WHERE nilai ='A';

SELECT COUNT(nilai) AS 'Banyak Mahasiswa = A', nilai
    -> FROM t_ambil
    -> WHERE nilai='A';
+----------------------+-------+
| Banyak Mahasiswa = A | nilai |
+----------------------+-------+
|                    6 | A     |
+----------------------+-------+
1 row in set (0.001 sec)



2. Berapa orang dosen yang berusia dibawah 60 tahun? 


SELECT COUNT(*) AS 'Dosen Umur <60'
FROM t_dosen
WHERE TIMESTAMPDIFF(year,tgl_lahir,now()) < 60;


SELECT COUNT(*) AS 'Dosen Umur <60'
    -> FROM t_dosen
    -> WHERE TIMESTAMPDIFF(year,tgl_lahir,now()) < 60;
+----------------+
| Dosen Umur <60 |
+----------------+
|              3 |
+----------------+
1 row in set (0.004 sec)


Tampilkan nama dosen, rgl, umur

SELECT nama, tgl_lahir, TIMESTAMPDIFF(year,tgl_lahir,now()) AS 'Umur'
FROM t_dosen;

SELECT nama, tgl_lahir, TIMESTAMPDIFF(year,tgl_lahir,now()) AS 'Umur'
    -> FROM t_dosen;
+----------------+------------+------+
| nama           | tgl_lahir  | Umur |
+----------------+------------+------+
| rinaldi munir  | 1966-04-12 |   55 |
| sri purwanti   | 1960-07-16 |   61 |
| inggriani liem | 1952-10-28 |   69 |
| reza satria    | 1970-11-21 |   51 |
| rila mandala   | 1964-03-21 |   57 |
+----------------+------------+------+
5 rows in set (0.001 sec)


======================================================================================

SELECT AGGREGATE..GROUP BY
___________________________

....fungsi yang digunkan untuk mengelompokan data berdasarkan kriteria tertentu dan kelompok field tertentu.
....biasanya digunakan untuk menampilkan hasil kalkulasi dari masing-masing kelompok nilai

Struktur:
	SELECT namafield, aggregate(namafield)
	FROM namatabel
	WHERE kondisi
	GROUP BY namafield;

Ingat: 
Tidak semua tabel bisa menggunakan perintah GROUP BY. Query ini hanya digunakan jika didalam tabel terdapat data berulang yang bisa dikelompokan


Contoh:
Tampilkan jmlah pelanggan yang ada pada masing-masing kota

SELECT kota, COUNT(*) 'Banyak Pelanggan'
FROM tpelanggan
WHERE kota IS NOT NULL
GROUP BY kota;


SOAL:
1. Tampilkan rata-rata jumlah barang yang terjual untuk masing-masing nonota

SELECT CEIL(AVG(jml)) AS 'Jumlah Barang Terjual', nonota
FROM ttrans
GROUP BY nonota;

 SELECT CEIL(AVG(jml)) AS 'Jumlah Barang Terjual', nonota
    -> FROM ttrans
    -> GROUP BY nonota;
+-----------------------+--------+
| Jumlah Barang Terjual | nonota |
+-----------------------+--------+
|                    10 | F001   |
|                    13 | F002   |
|                    13 | F010   |
|                    20 | K001   |
|                    30 | K002   |
|                    12 | K003   |
|                    40 | K005   |
|                     9 | T001   |
|                     5 | T004   |
|                     5 | T011   |
+-----------------------+--------+
10 rows in set (0.001 sec)



DPERKULIAHAN
1. Tampilkan berapa banyak mahasiswa yang mendapatkan setiap nilai 


SELECT COUNT(*) AS 'Banyak Mahasiswa', nilai
FROM t_ambil
GROUP BY nilai;

 SELECT COUNT(*) AS 'Banyak Mahasiswa', nilai
    -> FROM t_ambil
    -> GROUP BY nilai;
+------------------+-------+
| Banyak Mahasiswa | nilai |
+------------------+-------+
|                6 | A     |
|               11 | B     |
|                7 | C     |
|                2 | D     |
|                2 | E     |
+------------------+-------+
5 rows in set (0.001 sec)


Tampilkan rata-rata jumlah barang yang terjual (gunakan pembulatan keatas) yang dikelompokkan berdasarkan nota terurut dari rata-rata tertinggi dan yang ditampilkan hanya yang nilai rata-ratanya diatas 10 saja.

SELECT nonota,CEIL(AVG(jml)) AS 'Jumlah Rata-Rata'
FROM ttrans
GROUP by nonota
HAVING AVG(jml)>10
Order by nonota DESC;


Karena where hanya digunakan untuk menyaring nilai field seblum dikelompokkan. sementara untuk menyaring aggregate nilai => digunkan HAVING dan posisinya setelah pengelompokkan .

Struktur lengkap
	SELECT
	FROM
	WHERE
	GROUP BY
	HAVING
	ORDER BY
	LIMIT



Tampilkan rata-rata jumlah barang yang terjual (gunakan pembulatan keatas) yang dikelompokkan berdasarkan nota terurut dari rata-rata tertinggi dan yang ditampilkan hanya yang nilai rata-ratanya diatas 10 saja.

SELECT nonota,CEIL(AVG(jml)) AS 'Jumlah Rata-Rata'
FROM ttrans
GROUP by nonota
HAVING AVG(jml)>10
Order by nonota DESC;


 SELECT nonota,CEIL(AVG(jml)) AS 'Jumlah Rata-Rata'
    -> FROM ttrans
    -> GROUP by nonota
    -> HAVING AVG(jml)>10
    -> Order by nonota DESC;
+--------+------------------+
| nonota | Jumlah Rata-Rata |
+--------+------------------+
| K005   |               40 |
| K003   |               12 |
| K002   |               30 |
| K001   |               20 |
| F010   |               13 |
| F002   |               13 |
+--------+------------------+
6 rows in set (0.004 sec)


SELECT nonota,CEIL(AVG(jml)) jml_rata
FROM ttrans
GROUP by nonota
HAVING jml_rata>10
ORDER BY nonota DESC;

SELECT nonota,CEIL(AVG(jml)) jml_rata
FROM ttrans
GROUP by nonota
HAVING AVG(jml)>10
ORDER BY nonota DESC;


==================================================================================
SOAL DBPENJUALAN:
1. Tampilkan banyak transaksi, banyak barang dan total transaksi(jml*brg) yang dilakukan oleh masing-masing pelanggan. Kelompokkan berdasarkan nama pelanggan.

SELECT nmlgn, COUNT(*) Banyak_transaksi,
SUM(jml) Banyak_barang, 
SUM(jml*hrg) Total_transaksi
FROM tpelanggan JOIN ttrans
USING (kdlgn)
GROUP BY nmlgn;

SELECT nmlgn, COUNT(*) Banyak_transaksi,
    -> SUM(jml) Banyak_barang,
    -> SUM(jml*hrg) Total_transaksi
    -> FROM tpelanggan JOIN ttrans
    -> USING (kdlgn)
    -> GROUP BY nmlgn;
+--------------+------------------+---------------+-----------------+
| nmlgn        | Banyak_transaksi | Banyak_barang | Total_transaksi |
+--------------+------------------+---------------+-----------------+
| Citra Mozaic |                7 |            89 |        21950000 |
| Galaxy Media |                5 |            75 |        36000000 |
| Gamatechno   |                7 |            95 |        33300000 |
| JJ ENT       |                1 |            12 |         9000000 |
+--------------+------------------+---------------+-----------------+
4 rows in set (0.004 sec)


2. Tampilkan nama barang, tgl transaksi, total harga(jml*hrg) tertinggi untuk barang-barang yang penjualan tertingginya antara 100.000-5.000.000. Kelompokkan berdasarkan nama barang dan urutkan dari barang dengan total harga tertinggi.

SELECT nmbrg,tgl,MAX(jml*hrg) AS 'Total Harga Tertinggi'
FROM ttrans JOIN tbrg USING (kdbrg)
GROUP by nmbrg
HAVING MAX(jml*hrg) BETWEEN '100000' AND '50000000'
ORDER by 'Total Harga Tertinggi';

SELECT nmbrg,tgl,MAX(jml*hrg) AS 'Total Harga Tertinggi'
    -> FROM ttrans JOIN tbrg USING (kdbrg)
    -> GROUP by nmbrg
    -> HAVING MAX(jml*hrg) BETWEEN '100000' AND '50000000'
    -> ORDER by 'Total Harga Tertinggi';
+-----------------------+------------+-----------------------+
| nmbrg                 | tgl        | Total Harga Tertinggi |
+-----------------------+------------+-----------------------+
| Komputer Pentium 4    | 2008-09-01 |              30000000 |
| Notebook ASUS 12 Inch | 2008-09-01 |               6750000 |
| Disket                | 2008-09-01 |                500000 |
| Hardisk Ext WD 500GB  | 2008-09-02 |               3300000 |
| Flasdisk Kingston 8GB | 2008-09-01 |               1500000 |
+-----------------------+------------+-----------------------+
5 rows in set (0.009 sec)




SOAL CLASSICMODELS
1. Tampilkan berapa jumlah product yang diorder(quantityordered) dikelompokkan berdasarkan ordernumber, untuk jumlah orderanya melebihi 10

SELECT ordernumber, SUM(quantityordered) AS 'Jumlah Produk'
FROM orderdetails
GROUP BY ordernumber
HAVING SUM(quantityordered) >10;

 SELECT ordernumber, SUM(quantityordered) AS 'Jumlah Produk'
    -> FROM orderdetails
    -> GROUP BY ordernumber
    -> HAVING SUM(quantityordered) >10;
+-------------+---------------+
| ordernumber | Jumlah Produk |
+-------------+---------------+
|       10100 |           151 |
|       10101 |           142 |
|       10102 |            80 |
|       10103 |           541 |
|       10104 |           443 |
|       10105 |           545 |
|       10106 |           675 |
|       10107 |           229 |
|       10108 |           561 |
|       10109 |           212 |
|       10110 |           570 |
|       10420 |           532 |
|       10421 |            75 |
|       10422 |            76 |
|       10423 |           111 |
|       10424 |           269 |
|       10425 |           427 |
+-------------+---------------+
326 rows in set (0.007 sec)



2. Tampilkan nama customer dan berapa kali masing-masing customer tersebut melakukan order dan tampilkan juga rata-rata waktu yang dibutuhkan requireDate ke shippedDate (bisa pakai DATEDIFF). Lakukan pembulatan keatas

SELECT customerName, COUNT(*) AS 'Order',
CEIL(AVG(DATEDIFF(requiredDate, shippedDate))) AS 'Waktu'
FROM customers JOIN orders USING (customerNumber)
GROUP BY customerName;

 SELECT customerName, COUNT(*) AS 'Order',
    -> CEIL(AVG(DATEDIFF(requiredDate, shippedDate))) AS 'Waktu'
    -> FROM customers JOIN orders USING (customerNumber)
    -> GROUP BY customerName;
+------------------------------------+-------+-------+
| customerName                       | Order | Waktu |
+------------------------------------+-------+-------+
| Alpha Cognac                       |     3 |     8 |
| Amica Models & Co.                 |     2 |     6 |
| Anna's Decorations, Ltd            |     4 |     6 |
| Atelier graphique                  |     3 |     6 |
| Australian Collectables, Ltd       |     3 |     4 |
| Australian Collectors, Co.         |     5 |     5 |
| Australian Gift Network, Co        |     3 |     5 |
| Auto Associ├⌐s & Cie.               |     2 |     5 |
| Auto Canal+ Petit                  |     3 |     5 |
| Auto-Moto Classics Inc.            |     3 |     3 |
| AV Stores, Co.                     |     3 |     5 |
| Baane Mini Imports                 |     4 |     5 |
| Bavarian Collectables Imports, Co. |     1 |     6 |
| Blauer See Auto, Co.               |     4 |     5 |
| Boards & Toys Co.                  |     2 |     5 |
| CAF Imports                        |     2 |     3 |
| Cambridge Collectables Co.         |     2 |     6 |
| Canadian Gift Exchange Network     |     2 |     4 |
| Classic Gift Ideas, Inc            |     2 |     5 |
| Classic Legends Inc.               |     3 |     4 |
| Clover Collections, Co.            |     2 |     2 |
| Collectable Mini Designs Co.       |     2 |     6 |
| Collectables For Less Inc.         |     3 |     5 |
| Corporate Gift Ideas Co.           |     4 |     6 |
| Corrida Auto Replicas, Ltd         |     3 |     5 |
| Cruz & Sons Co.                    |     3 |     4 |
| Daedalus Designs Imports           |     2 |     5 |
| Danish Wholesale Imports           |     5 |     7 |
| Diecast Classics Inc.              |     4 |     4 |
| Diecast Collectables               |     2 |     6 |
| Double Decker Gift Stores, Ltd     |     2 |     2 |
| Down Under Souveniers, Inc         |     5 |     6 |
| Dragon Souveniers, Ltd.            |     5 |    -6 |
| Enaco Distributors                 |     3 |     4 |
| Euro+ Shopping Channel             |    26 |     5 |
| Extreme Desk Decorations, Ltd      |     3 |     4 |
| Frau da Collezione                 |     2 |     3 |
| FunGiftIdeas.com                   |     3 |     4 |
| Gift Depot Inc.                    |     3 |     4 |
| Gift Ideas Corp.                   |     3 |     6 |
| Gifts4AllAges.com                  |     3 |     4 |
| giftsbymail.co.uk                  |     2 |     4 |
| GiftsForHim.com                    |     3 |     7 |
| Handji Gifts& Co                   |     4 |     8 |
| Heintze Collectables               |     2 |     7 |
| Herkku Gifts                       |     3 |     5 |
| Iberia Gift Imports, Corp.         |     2 |     4 |
| Kelly's Gift Shop                  |     4 |     5 |
| King Kong Collectables, Co.        |     2 |     6 |
| L'ordine Souveniers                |     3 |     3 |
| La Corne D'abondance, Co.          |     3 |     4 |
| La Rochelle Gifts                  |     4 |     6 |
| Land of Toys Inc.                  |     4 |     7 |
| Lyon Souveniers                    |     3 |     3 |
| Marseille Mini Autos               |     3 |     5 |
| Marta's Replicas Co.               |     2 |     6 |
| Men 'R' US Retailers, Ltd.         |     2 |     2 |
| Microscale Inc.                    |     2 |     4 |
| Mini Auto Werke                    |     3 |     6 |
| Mini Caravy                        |     3 |     3 |
| Mini Classics                      |     2 |     4 |
| Mini Creations Ltd.                |     3 |     5 |
| Mini Gifts Distributors Ltd.       |    17 |     6 |
| Mini Wheels Co.                    |     3 |     6 |
| Motor Mint Distributors Inc.       |     3 |     4 |
| Muscle Machine Inc                 |     4 |     6 |
| Norway Gifts By Mail, Co.          |     2 |     5 |
| Online Diecast Creations Co.       |     3 |     3 |
| Online Mini Collectables           |     2 |     3 |
| Osaka Souveniers Co.               |     2 |     1 |
| Oulu Toy Supplies, Inc.            |     3 |     4 |
| Petit Auto                         |     3 |     7 |
| Qu├⌐bec Home Shopping Network       |     3 |     4 |
| Reims Collectables                 |     5 |     5 |
| Rovelli Gifts                      |     3 |     4 |
| Royal Canadian Collectables, Ltd.  |     2 |     7 |
| Royale Belge                       |     4 |     7 |
| Salzburg Collectables              |     4 |     5 |
| Saveley & Henriot, Co.             |     3 |     6 |
| Scandinavian Gift Ideas            |     3 |     2 |
| Signal Collectibles Ltd.           |     2 |     3 |
| Signal Gift Stores                 |     3 |     6 |
| Souveniers And Things Co.          |     4 |     3 |
| Stylish Desk Decors, Co.           |     3 |     5 |
| Suominen Souveniers                |     3 |     4 |
| Super Scale Inc.                   |     2 |     3 |
| Technics Stores Inc.               |     4 |     4 |
| Tekni Collectables Inc.            |     3 |     1 |
| The Sharp Gifts Warehouse          |     4 |     7 |
| Tokyo Collectables, Ltd            |     4 |     3 |
| Toms Spezialit├ñten, Ltd            |     2 |     6 |
| Toys of Finland, Co.               |     3 |     8 |
| Toys4GrownUps.com                  |     3 |     3 |
| UK Collectables, Ltd.              |     3 |     8 |
| Vida Sport, Ltd                    |     2 |     6 |
| Vitachrome Inc.                    |     3 |     3 |
| Volvo Model Replicas, Co           |     4 |     6 |
| West Coast Collectables Co.        |     2 |     6 |
+------------------------------------+-------+-------+
98 rows in set (0.021 sec)


3. Tampilkan berapa banyak karyawan yang berkerja di masing-masing office untuk office yang berada di kota Boston, Paris, dan Tokyo



 SELECT COUNT(*) AS 'Banyak Karyawan'
    -> FROM offices JOIN employees USING(officeCode)
    -> WHERE city IN ('boston', 'paris', 'tokyo');
+-----------------+
| Banyak Karyawan |
+-----------------+
|               9 |
+-----------------+
1 row in set (0.001 sec)

no 1

SELECT CONCAT(firstName,' ',lastName) AS 'FullName', employees.jobtitle, country,
CASE state
WHEN 'CA' THEN 'California'
WHEN 'NY' THEN 'New York'
WHEN 'MA' THEN 'Massachusetts'
ELSE 'Other'
END AS 'State'
FROM employees INNER JOIN offices USING(officeCode)
WHERE country LIKE '%USA%';



no 2

SELECT customerName, orderDate, shippedDate,CONCAT(TIMESTAMPDIFF(DAY, orderDate, shippedDate), 'Hari') AS 'Waktu Tunggu'
FROM customers INNER JOIN orders USING(customerNumber)
WHERE orderDate BETWEEN '20040101' AND '20040831'
AND TIMESTAMPDIFF(DAY, orderDate, shippedDate) > 5
ORDER BY 'Waktu Tunggu' ASC;



no 3

SELECT UPPER(CONCAT(contactFirstName,' ',contactLastName)) AS 'FullName',
CONCAT (addressLine1,'STATE',state) AS 'Address', creditLimit, productName
FROM customers JOIN orders USING(customerNumber)
JOIN orderDetails USING(orderNumber) JOIN products USING(productCode)
WHERE state IN ('MA','My','NV','CA','NJ') AND creditLimit BETWEEN '50000' AND '100000'
AND productName LIKE '%harley%'
ORDER BY creditLimit DESC;




no 4

SELECT customerName, CONCAT(contactFirstName,' ',contactLastName) AS 'ContactFullName', productName
FROM customers JOIN orders USING(customerNumber)
JOIN orderDetails USING(orderNumber) JOIN products USING(productCode)
WHERE productName LIKE '%harley%';




no 5

SELECT CONCAT(firstName,' ',lastName) AS 'FullName', city,
IFNULL (state, country) AS state
FROM employees JOIN offices USING(officeCode);


no 6

SELECT CONCAT(firstName,' ',lastName) AS 'EmployeeName', productName, customerName
FROM employees, customers, orders, orderDetails, products
WHERE employees.employeeNumber = customers.salesRepEmployeeNumber AND customers.customerNumber = orders.customerNumber AND
orders.orderNumber = orderDetails.orderNumber AND orderDetails.productCode = products.productCode AND
firstName LIKE '%Leslie%' AND lastName LIKE '%Thompson%' AND YEAR(shippedDate)='2003';





no 7

SELECT customerNumber, checkNumber, date_format(paymentDate, '%d-%m-%Y') AS 'PaymentDate', amount, customerName
FROM payments JOIN customers USING(customerNumber)
WHERE customerNumber = '124' AND YEAR(paymentDate) = '2004' AND amount > 50000;




no 8

SELECT priceEach, buyPrice, (priceEach-buyPrice) AS 'Profit',
(priceEach-buyPrice) * quantityOrdered AS 'Keuntungan',
status, (priceEach*quantityOrdered) - (buyPrice*quantityOrdered) AS 'Loss'
FROM orderDetails JOIN products USING(productCode) JOIN orders USING(orderNumber)
WHERE comments LIKE '%cancel%';




no 9

SELECT UPPER(productName) AS 'ProductName', orderDate, quantityOrdered,
priceEach, FORMAT(quantityOrdered*priceEach,2) AS 'Total', productLine
FROM orders JOIN orderDetails USING(orderNumber)
JOIN products USING(productCode)
WHERE orderDate BETWEEN '20030101' AND '20030630'
AND quantityOrdered BETWEEN '50' AND '100'
AND productLine = 'Classic Cars'
ORDER BY 'Total' DESC
LIMIT 10;




no 10

SELECT CONCAT(firstName,' ',lastName) AS 'FullName', customerName,
IFNULL(addressLine2,addressLine1) AS 'Address', country, creditLimit
FROM employees, customers
WHERE employees.employeeNumber = customers.salesRepEmployeeNumber
AND country = 'USA' AND creditLimit BETWEEN '50000' AND '75000'
ORDER BY creditLimit DESC



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
29 Desember 2021

SUB QUERY / NESTED QUERY
=========================
--> query bersarang / ada query didalam sebuah struktur quer

	SELECT
	FROM
	WHERE
	GROUP BY
	LIMIT
	HAVING
	ORDER BY
	LIMIT

CONTOH:
  1. Tampilkan data transaksi yang memiliki jumlah diatas jumlah rata-rata
	-Cari terlebih dahulu rata-rata jumlah = (13.55)
================
SELECT AVG(jml)
FROM ttrans;
================

SELECT AVG(jml)
    -> FROM ttrans;
	+----------+
	| AVG(jml) |
	+----------+
	|  13.5500 |
	+----------+
	1 row in set (0.018 sec)


	
	-Data transakasi dengan jumlah diatas rata-rata (13.55) = (8 Transaksi)
=====================
SELECT * FROM ttrans
WHERE jml > 13.55;
=====================

SELECT * FROM ttrans
    -> WHERE jml > 13.55;
	+--------+------------+-------+-------+------+--------+
	| nonota | tgl        | kdlgn | kdbrg | jml  | hrg    |
	+--------+------------+-------+-------+------+--------+
	| T001   | 2008-09-01 | P001  | B003  |   20 |  25000 |
	| F002   | 2008-09-01 | P002  | B002  |   15 | 175000 |
	| K001   | 2008-09-02 | P002  | B001  |   20 | 750000 |
	| K001   | 2008-09-02 | P002  | B002  |   20 | 175000 |
	| K002   | 2008-09-03 | P003  | B002  |   30 | 225000 |
	| K002   | 2008-09-03 | P003  | B005  |   30 |  50000 |
	| F010   | 2005-03-01 | P002  | B004  |   15 | 220000 |
	| K005   | 2006-05-31 | P001  | B001  |   40 | 750000 |
	+--------+------------+-------+-------+------+--------+
	8 rows in set (0.005 sec)

----------------------------------------------------------------------------------------

  2. Tampilkan tgl, nonota, kdbrg, jml, dan hrg untuk barang yang satuannya sama dengan barang dengan kode B002

	-Cari dulu nilai satuan B002 = (Unit)
=========================
SELECT satuan FROM tbrg
WHERE kdbrg = 'B002';
=========================

SELECT satuan FROM tbrg
    -> WHERE kdbrg = 'B002';
	+--------+
	| satuan |
	+--------+
	| Unit   |
	+--------+
	1 row in set (0.009 sec)


	-Tampilkan tgl,nonota,kdbrg,jml, dan hrg untuk barang yang satuannya unit (14 rows)
===================================
SELECT tgl, nonota, kdbrg, jml, hrg
FROM ttrans JOIN tbrg USING(kdbrg)
WHERE satuan = 'Unit';
===================================

SELECT tgl, nonota, kdbrg, jml, hrg
    -> FROM ttrans JOIN tbrg USING(kdbrg)
    -> WHERE satuan = 'Unit';
	+------------+--------+-------+------+--------+
	| tgl        | nonota | kdbrg | jml  | hrg    |
	+------------+--------+-------+------+--------+
	| 2008-09-01 | T001   | B001  |    5 | 750000 |
	| 2008-09-02 | K001   | B001  |   20 | 750000 |
	| 2008-10-01 | T004   | B001  |   10 | 750000 |
	| 2008-10-10 | T011   | B001  |    5 | 175000 |
	| 2007-01-10 | T004   | B001  |    5 | 750000 |
	| 2006-02-06 | K003   | B001  |   12 | 750000 |
	| 2005-03-01 | F010   | B001  |   10 | 750000 |
	| 2006-05-31 | K005   | B001  |   40 | 750000 |
	| 2008-09-01 | T001   | B002  |    5 | 175000 |
	| 2008-09-01 | T001   | B002  |    5 | 175000 |
	| 2008-09-01 | F002   | B002  |   15 | 175000 |
	| 2008-09-02 | K001   | B002  |   20 | 175000 |
	| 2008-09-03 | K002   | B002  |   30 | 225000 |
	| 2007-01-10 | T004   | B002  |    1 | 175000 |
	+------------+--------+-------+------+--------+
	14 rows in set (0.010 sec)


#Kedua Soal diatas bisa dijadikan dalam 1 langkah MySQL yaitu dengan menggunakan SUB QUERY / NESTED QUERY, dengan cara meletakkan query penghasil kondisi sebagai bagian dari query utama.

SUB QUERY ==> Bisa berada didalam SELECT, FROM, WHERE.

SUB QUERY dalam klausa WHERE
----------------------------
Struktur
	SELECT field1, field2.....	==> query 1 atau query luar
	FROM namatabel
	WHERE field OPERATOR
		(SELECT namafield	==> query 2 atau query dalam / inner query
		FROM namatabel
		WHERE kondisi);

#Hasil dari query dalam akan mempengaruhi untuk query luar

OPERATOR
	- operator relasi ==>(< <= > >= <> atau != =)
	- oPERATOR IN dan NOT IN ==>(LIKE, BETWWEN, dll)
	- operator EXISTS dan NOT EXISTS
	- operator ANY, SOME, ALL 


A. SUBQUERY menggunakan operator Relasi
	=> operator ini digunkaan jika inner query/subquery menghasilkan nilai tunggal


CONTOH:
  1. Tampilkan data transaksi yang memiliki jumlah diatas jumlah rata-rata
=================================================================
SELECT tgl,nonota,kdbrg,jml,hrg
FROM ttrans JOIN tbrg USING(kdbrg)
WHERE satuan = (SELECT satuan FROM tbrg WHERE kdbrg = 'B002');
==================================================================

SELECT tgl,nonota,kdbrg,jml,hrg
    -> FROM ttrans JOIN tbrg USING(kdbrg)
    -> WHERE satuan = (SELECT satuan FROM tbrg WHERE kdbrg = 'B002');
	+------------+--------+-------+------+--------+
	| tgl        | nonota | kdbrg | jml  | hrg    |
	+------------+--------+-------+------+--------+
	| 2008-09-01 | T001   | B001  |    5 | 750000 |
	| 2008-09-02 | K001   | B001  |   20 | 750000 |
	| 2008-10-01 | T004   | B001  |   10 | 750000 |
	| 2008-10-10 | T011   | B001  |    5 | 175000 |
	| 2007-01-10 | T004   | B001  |    5 | 750000 |
	| 2006-02-06 | K003   | B001  |   12 | 750000 |
	| 2005-03-01 | F010   | B001  |   10 | 750000 |
	| 2006-05-31 | K005   | B001  |   40 | 750000 |
	| 2008-09-01 | T001   | B002  |    5 | 175000 |
	| 2008-09-01 | T001   | B002  |    5 | 175000 |
	| 2008-09-01 | F002   | B002  |   15 | 175000 |
	| 2008-09-02 | K001   | B002  |   20 | 175000 |
	| 2008-09-03 | K002   | B002  |   30 | 225000 |
	| 2007-01-10 | T004   | B002  |    1 | 175000 |
	+------------+--------+-------+------+--------+
	14 rows in set (0.006 sec)

  2. Tampilkan tgl, nonota, kdbrg, jml, dan hrg untuk barang yang satuannya sama dengan barang dengan kode B002
==========================================
SELECT * FROM ttrans
WHERE jml > (SELECT AVG(jml) FROM ttrans);
==========================================

SELECT * FROM ttrans
    -> WHERE jml > (SELECT AVG(jml) FROM ttrans);
	+--------+------------+-------+-------+------+--------+
	| nonota | tgl        | kdlgn | kdbrg | jml  | hrg    |
	+--------+------------+-------+-------+------+--------+
	| T001   | 2008-09-01 | P001  | B003  |   20 |  25000 |
	| F002   | 2008-09-01 | P002  | B002  |   15 | 175000 |
	| K001   | 2008-09-02 | P002  | B001  |   20 | 750000 |
	| K001   | 2008-09-02 | P002  | B002  |   20 | 175000 |
	| K002   | 2008-09-03 | P003  | B002  |   30 | 225000 |
	| K002   | 2008-09-03 | P003  | B005  |   30 |  50000 |
	| F010   | 2005-03-01 | P002  | B004  |   15 | 220000 |
	| K005   | 2006-05-31 | P001  | B001  |   40 | 750000 |
	+--------+------------+-------+-------+------+--------+
	8 rows in set (0.002 sec)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SOAL:
DBPERNJUALAN:
  1. Tampilkan data transaksi yang memiliki harga terendah

SELECT * FROM ttrans
WHERE hrg = (SELECT MIN(hrg) FROM ttrans);

 SELECT * FROM ttrans
    -> WHERE hrg = (SELECT MIN(hrg) FROM ttrans);
	+--------+------------+-------+-------+------+-------+
	| nonota | tgl        | kdlgn | kdbrg | jml  | hrg   |
	+--------+------------+-------+-------+------+-------+
	| T001   | 2008-09-01 | P001  | B003  |   20 | 25000 |
	| T004   | 2007-01-10 | P003  | B003  |    3 | 25000 |
	+--------+------------+-------+-------+------+-------+
	2 rows in set (0.001 sec)

  2. Tampilkan data pelanggan selain kodenya P005 dan berada dikota yang berbeda dengan pelanggan Gamatechno

SELECT * FROM tpelanggan
WHERE kdlgn <> 'P005' AND kota <> (SELECT kota FROM tpelanggan WHERE nmlgn = 'Gamatechno');

SELECT * FROM tpelanggan
    -> WHERE kdlgn <> 'P005' AND kota <> (SELECT kota FROM tpelanggan WHERE nmlgn = 'Gamatechno');
+-------+--------------+-------------+----------------+-------+--------------+
| kdlgn | nmlgn        | almlgn      | kota           | kdpos | telp         |
+-------+--------------+-------------+----------------+-------+--------------+
| P001  | Galaxy Media | Birugo      | Bukittinggi    | 26111 | 081291313052 |
| P003  | Citra Mozaic | Jl. Veteran | Padang Panjang | 27401 | 081291313052 |
| P006  | Tk. Intan    | Jl.S.Hatta  | Bukittinggi    | 26111 | 081291313052 |
| P010  | Rudi         | NULL        | Solok          | NULL  | NULL         |
+-------+--------------+-------------+----------------+-------+--------------+
4 rows in set (0.004 sec)


DBPERKULIAHAN:
  3. Tampilkan data mahasiswa (nama,kode,nilai) yang mendapatkan nilai yang sama dengan Darmawan pada saat mengambil matakuliah dengan kode TI111

SELECT kode, nama, nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp) 
WHERE nilai = (SELECT nilai FROM t_mahasiswa JOIN t_ambil
USING(no_bp) WHERE nama LIKE '%darmawan%' AND kode IN ('ti111'));

SELECT kode, nama, nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
    ->  WHERE nilai = (SELECT nilai FROM t_mahasiswa JOIN t_ambil
    -> USING(no_bp) WHERE nama LIKE '%darmawan%' AND kode IN ('ti111'));
	+-------+----------------+-------+
	| kode  | nama           | nilai |
	+-------+----------------+-------+
	| ti111 | darmawan p     | A     |
	| ti321 | albinanto      | A     |
	| ti123 | rizky yulianto | A     |
	| ti221 | nova kurniawan | A     |
	| ti331 | andik taufik   | A     |
	| ti111 | anggun hapsari | A     |
	+-------+----------------+-------+
	6 rows in set (0.004 sec)

CARA LAIN ( YANG DIPRAKTEKIN IBU)

SELECT nilai FROM t_mahasiswa JOIn t_ambil USING(no_bp)
WHERE nama LIKE 'darmawan%' AND kode = 'TI111';

SELECT nilai FROM t_mahasiswa JOIn t_ambil USING(no_bp)
    -> WHERE nama LIKE 'darmawan%' AND kode = 'TI111';
	+-------+
	| nilai |
	+-------+
	| A     |
	+-------+
	1 row in set (0.001 sec)

SELECT nama, kode, nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
WHERE kode = 'TI111' AND nilai = (SELECT nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
WHERE nama LIKE 'darmawan%' AND kode = 'TI111'); 

SELECT nama, kode, nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
    -> WHERE kode = 'TI111' AND nilai = (SELECT nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
    -> WHERE nama LIKE 'darmawan%' AND kode = 'TI111');
	+----------------+-------+-------+
	| nama           | kode  | nilai |
	+----------------+-------+-------+
	| darmawan p     | ti111 | A     |
	| anggun hapsari | ti111 | A     |
	+----------------+-------+-------+
	2 rows in set (0.001 sec)


  4. Tampilkan nama dosen yang usianya lebih muda dari rila mandala

SELECT * FROM t_dosen
WHERE timestampdiff(year, tgl_lahir, now()) < (SELECT timestampdiff(year, tgl_lahir, now()) FROM t_dosen WHERE nama LIKE '%rila mandala%');

SELECT * FROM t_dosen
    -> WHERE timestampdiff(year, tgl_lahir, now()) < (SELECT timestampdiff(year, tgl_lahir, now()) FROM t_dosen WHERE nama LIKE '%rila mandala%');
	+-----------+---------------+------------+--------------------------+
	| nip       | nama          | tgl_lahir  | alamat                   |
	+-----------+---------------+------------+--------------------------+
	| 132012069 | rinaldi munir | 1966-04-12 | jl.soekarno hatta no 131 |
	| 132041073 | reza satria   | 1970-11-21 | jl.buah batu no 42       |
	+-----------+---------------+------------+--------------------------+
	2 rows in set (0.003 sec)


SELECT *, timestampdiff(year, tgl_lahir, now()) umur FROM t_dosen
WHERE timestampdiff(year, tgl_lahir, now()) < (SELECT timestampdiff(year, tgl_lahir, now()) FROM t_dosen WHERE nama LIKE '%rila mandala%');

SELECT *, timestampdiff(year, tgl_lahir, now()) umur FROM t_dosen
    -> WHERE timestampdiff(year, tgl_lahir, now()) < (SELECT timestampdiff(year, tgl_lahir, now()) FROM t_dosen WHERE nama LIKE '%rila mandala%');
+-----------+---------------+------------+--------------------------+------+
| nip       | nama          | tgl_lahir  | alamat                   | umur |
+-----------+---------------+------------+--------------------------+------+
| 132012069 | rinaldi munir | 1966-04-12 | jl.soekarno hatta no 131 |   55 |
| 132041073 | reza satria   | 1970-11-21 | jl.buah batu no 42       |   51 |
+-----------+---------------+------------+--------------------------+------+
2 rows in set (0.001 sec)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
B. SUBQUERY menggunakan operator INT dan NOT IN
	=> operator ini digunakan jika inner query/subquery mengembalikan lebih dari sebuah nilai.

Contoh:
  Tampilkan data mahasiswa yang mendapatkan nilai yang sama dengan nilai darmawan

SELECT nama, kode, nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
WHERE nilai = (SELECT nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
WHERE nama LIKE 'darmawan%'); 

# kode di atas error karena subquery menghasilkan lebih dari sebuah nilai, sehingga tidak bisa digunakan operator relasi

SELECT distinct nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
WHERE nama like 'darmawan%';

  SELECT distinct nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
    -> WHERE nama like 'darmawan%';
+-------+
| nilai |
+-------+
| A     |
| B     |
| C     |
+-------+
3 rows in set (0.001 sec)

 #Karena subquery menghasilkan lebih dari sebuah nilai => IN dan NOT IN

Contoh:
  1. Tampilkan data mahasiswa yang mendapatkan nilai yang sama dengan nilai darmawan

SELECT nama, kode, nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
WHERE nilai IN (SELECT nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
WHERE nama LIKE 'darmawan%'); 

 SELECT nama, kode, nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
    -> WHERE nilai IN (SELECT nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
    -> WHERE nama LIKE 'darmawan%');
+----------------+-------+-------+
| nama           | kode  | nilai |
+----------------+-------+-------+
| darmawan p     | ti111 | A     |
| darmawan p     | ti211 | B     |
| darmawan p     | ti321 | C     |
| darmawan p     | ti331 | C     |
| albinanto      | ti111 | B     |
| albinanto      | ti211 | C     |
| albinanto      | ti321 | A     |
| rizky yulianto | ti111 | C     |
| rizky yulianto | ti123 | A     |
| rizky yulianto | ti211 | B     |
| rizky yulianto | ti331 | B     |
| nova kurniawan | ti123 | B     |
| nova kurniawan | ti221 | A     |
| nova kurniawan | ti211 | B     |
| gama melisa    | ti111 | B     |
| gama melisa    | ti123 | B     |
| gama melisa    | ti211 | C     |
| andik taufik   | ti211 | C     |
| andik taufik   | ti321 | B     |
| andik taufik   | ti331 | A     |
| anggun hapsari | ti111 | A     |
| anggun hapsari | ti221 | B     |
| anggun hapsari | ti211 | B     |
| anggun hapsari | ti321 | C     |
+----------------+-------+-------+
24 rows in set (0.001 sec)


  2. Tampilkan data mahasiswa yang mendapatkan nilai yang tidak sama dengan nilai dermawan


SELECT nama, kode, nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
WHERE nilai NOT IN (SELECT nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
WHERE nama LIKE 'darmawan%'); 


SELECT nama, kode, nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
    -> WHERE nilai NOT IN (SELECT nilai FROM t_mahasiswa JOIN t_ambil USING(no_bp)
    -> WHERE nama LIKE 'darmawan%');
	+----------------+-------+-------+
	| nama           | kode  | nilai |
	+----------------+-------+-------+
	| albinanto      | ti221 | D     |
	| nova kurniawan | ti111 | E     |
	| gama melisa    | ti221 | E     |
	| andik taufik   | ti111 | D     |
	+----------------+-------+-------+
	4 rows in set (0.005 sec)

==========================================================================================

SOAL:
CLASSICMODELS
  1. Tampilkan nama lengkap employee yang berkerja satu kantor dengan employee bernama Peter Marsh

SELECT officeCode, CONCAT(firstName,' ',lastName) nama_karyawan
FROM employees
WHERE officeCode = (SELECT officeCode FROM employees
WHERE CONCAT(firstName,' ',lastName) ='Peter Marsh');

 SELECT officeCode, CONCAT(firstName,' ',lastName) nama_karyawan
    -> FROM employees
    -> WHERE officeCode = (SELECT officeCode FROM employees
    -> WHERE CONCAT(firstName,' ',lastName) ='Peter Marsh');
	+------------+-------------------+
	| officeCode | nama_karyawan     |
	+------------+-------------------+
	| 6          | William Patterson |
	| 6          | Andy Fixter       |
	| 6          | Peter Marsh       |
	| 6          | Tom King          |
	+------------+-------------------+
	4 rows in set (0.002 sec)



  2. Tampilkan nama produk, quantityOdered, priceEach, total(quantityoOrdered*priceeach) yang memiliki quantityordered antara 60-70 dan total diatas rata-rata total keseluruhan. Tampilkan terurut dari total tertinggi.


SELECT productName, quantityOrdered, priceEach, quantityOrdered * priceEach total
FROM products JOIN orderdetails USING(productCode)
WHERE quantityOrdered BETWEEN 60-70 AND quantityOrdered * priceEach > (SELECT AVG(quantityOrdered*priceEach) FROM orderdetails) ORDER BY total DESC;

DARI IBU
SELECT productName, quantityOrdered, priceEach, quantityOrdered*priceEach as total
FROM products JOIN orderdetails USING(productCode)
WHERE quantityOrdered BETWEEN 60-70 AND quantityOrdered*priceEach > (SELECT 


SELECT productName, quantityOrdered,priceEach, quantityOrdered * priceEach AS total
FROM products JOIN orderDetails USING (productCode)
WHERE quantityOrdered BETWEEN 60 AND 70
AND quantityOrdered * priceEach > (SELECT avg(quantityOrdered*priceEach) FROM orderDetails)
ORDER BY total DESC;


 SELECT productName, quantityOrdered,priceEach, quantityOrdered * priceEach AS total
    -> FROM products JOIN orderDetails USING (productCode)
    -> WHERE quantityOrdered BETWEEN 60 AND 70
    -> AND quantityOrdered * priceEach > (SELECT avg(quantityOrdered*priceEach) FROM orderDetails)
    -> ORDER BY total DESC;
+---------------------------------------+-----------------+-----------+----------+
| productName                           | quantityOrdered | priceEach | total    |
+---------------------------------------+-----------------+-----------+----------+
| 2003 Harley-Davidson Eagle Drag Bike  |              66 |    174.29 | 11503.14 |
| 1968 Ford Mustang                     |              64 |    163.44 | 10460.16 |
| 1992 Ferrari 360 Spider red           |              60 |    157.49 |  9449.40 |
| 1972 Alfa Romeo GTA                   |              64 |    134.64 |  8616.96 |
| 2002 Suzuki XREO                      |              66 |    122.00 |  8052.00 |
| 1956 Porsche 356A Coupe               |              70 |    112.34 |  7863.80 |
| 1962 Volkswagen Microbus              |              70 |    109.90 |  7693.00 |
| 1948 Porsche Type 356 Roadster        |              65 |    117.26 |  7621.90 |
| 1993 Mazda RX-7                       |              61 |    124.56 |  7598.16 |
| 1937 Lincoln Berline                  |              65 |     99.66 |  6477.90 |
| 1969 Harley Davidson Ultimate Chopper |              66 |     79.43 |  5242.38 |
| 1932 Alfa Romeo 8C2300 Spider Sport   |              66 |     73.62 |  4858.92 |
| 1948 Porsche 356-A Roadster           |              61 |     72.38 |  4415.18 |
| 1912 Ford Model T Delivery Wagon      |              60 |     72.58 |  4354.80 |
| 1957 Ford Thunderbird                 |              66 |     64.14 |  4233.24 |
| 1928 Ford Phaeton Deluxe              |              62 |     62.60 |  3881.20 |
| Corsair F4U ( Bird Cage)              |              64 |     59.37 |  3799.68 |
| 1970 Chevy Chevelle SS 454            |              60 |     60.26 |  3615.60 |
+---------------------------------------+-----------------+-----------+----------+
18 rows in set (0.008 sec)


  3. Tampilkan data order berupa ordernumber, orderdate, requireddate dan status yang terjadi selama tahun 2005 yang status ordernya tidak sama dengan status yang pernah terjadi pada bulan May 2005

SELECT orderNumber, orderDate, requiredDate, status
FROM orders
WHERE YEAR(orderDate) = 2005 AND status NOT IN (SELECT status FROM orders
WHERE orderDate BETWEEN '20050501' AND '20050531');
======================================================================================
Mencari IPK
  Tampilkan IPK yang diperoleh masing-masing mahasiswa. Urutkan dari IPK tertinggi.


SELECT nama,kode,sks, nilai
FROM t_mahasiswa JOIN t_ambil USING(no_bp) JOIN t_kuliah USING(kode)
WHERE nama='albinanto';

 SELECT nama,kode,sks, nilai
    -> FROM t_mahasiswa JOIN t_ambil USING(no_bp) JOIN t_kuliah USING(kode)
    -> WHERE nama='albinanto';
	+-----------+-------+------+-------+
	| nama      | kode  | sks  | nilai |
	+-----------+-------+------+-------+
	| albinanto | ti111 |    2 | B     |
	| albinanto | ti211 |    3 | C     |
	| albinanto | ti221 |    2 | D     |
	| albinanto | ti321 |    1 | A     |
	+-----------+-------+------+-------+
	4 rows in set (0.002 sec)


A=4
B=3
C=2
D=1
E=0

SELECT SUM THEN
SUM SKS


SELECT SUM(sks*CASE nilai WHEN A THEN 4, Nilai
), AS 'IPK'









SELECT DISTINCT customerName, productName
FROM customers JOIN orders USING(customerNumber)
JOIN orderDetails USING(orderNumber)
JOIN products USING(productCode)
WHERE productName IN (SELECT productName FROM customers JOIN orders 
USING(customerNumber) JOIN orderDetails USING(orderNumber)
JOIN products USING(productCode)
WHERE customerName LIKE '%toys%')
ORDER BY customerName LIMIT 20;








